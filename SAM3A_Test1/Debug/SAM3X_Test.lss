
SAM3X_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000808a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00080cd8  00020434  2**2
                  ALLOC
  3 .stack        00000404  20000474  00080d18  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000878  0008111c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000254a  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006a3  00000000  00000000  00022a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002f0  00000000  00000000  000230a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000120  00000000  00000000  00023393  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000234b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00010f69  00000000  00000000  00023573  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000026b7  00000000  00000000  000344dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000510b5  00000000  00000000  00036b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000003b8  00000000  00000000  00087c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	78 08 00 20 65 01 08 00 61 01 08 00 61 01 08 00     x.. e...a...a...
   80010:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   8003c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8004c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8005c:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
   8006c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
	...
   80084:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   80094:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   800b4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800c4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800d4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800e4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	000808a4 	.word	0x000808a4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000808a4 	.word	0x000808a4
   80154:	20000438 	.word	0x20000438
   80158:	000808a4 	.word	0x000808a4
   8015c:	00000000 	.word	0x00000000

00080160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80160:	e7fe      	b.n	80160 <Dummy_Handler>
	...

00080164 <Reset_Handler>:
{
   80164:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80166:	4b11      	ldr	r3, [pc, #68]	; (801ac <Reset_Handler+0x48>)
   80168:	4a11      	ldr	r2, [pc, #68]	; (801b0 <Reset_Handler+0x4c>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d009      	beq.n	80182 <Reset_Handler+0x1e>
   8016e:	4b0f      	ldr	r3, [pc, #60]	; (801ac <Reset_Handler+0x48>)
   80170:	4a0f      	ldr	r2, [pc, #60]	; (801b0 <Reset_Handler+0x4c>)
   80172:	e003      	b.n	8017c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80174:	6811      	ldr	r1, [r2, #0]
   80176:	6019      	str	r1, [r3, #0]
   80178:	3304      	adds	r3, #4
   8017a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8017c:	490d      	ldr	r1, [pc, #52]	; (801b4 <Reset_Handler+0x50>)
   8017e:	428b      	cmp	r3, r1
   80180:	d3f8      	bcc.n	80174 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80182:	4b0d      	ldr	r3, [pc, #52]	; (801b8 <Reset_Handler+0x54>)
   80184:	e002      	b.n	8018c <Reset_Handler+0x28>
                *pDest++ = 0;
   80186:	2200      	movs	r2, #0
   80188:	601a      	str	r2, [r3, #0]
   8018a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8018c:	4a0b      	ldr	r2, [pc, #44]	; (801bc <Reset_Handler+0x58>)
   8018e:	4293      	cmp	r3, r2
   80190:	d3f9      	bcc.n	80186 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80192:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x5c>)
   80194:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8019c:	4a09      	ldr	r2, [pc, #36]	; (801c4 <Reset_Handler+0x60>)
   8019e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   801a0:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x64>)
   801a2:	4798      	blx	r3
        main();
   801a4:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x68>)
   801a6:	4798      	blx	r3
   801a8:	e7fe      	b.n	801a8 <Reset_Handler+0x44>
   801aa:	bf00      	nop
   801ac:	20000000 	.word	0x20000000
   801b0:	000808a4 	.word	0x000808a4
   801b4:	20000434 	.word	0x20000434
   801b8:	20000434 	.word	0x20000434
   801bc:	20000474 	.word	0x20000474
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	0008070d 	.word	0x0008070d
   801cc:	000803d9 	.word	0x000803d9

000801d0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801d4:	4a20      	ldr	r2, [pc, #128]	; (80258 <SystemInit+0x88>)
   801d6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   801dc:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801de:	4b1f      	ldr	r3, [pc, #124]	; (8025c <SystemInit+0x8c>)
   801e0:	6a1b      	ldr	r3, [r3, #32]
   801e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   801e6:	d107      	bne.n	801f8 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801e8:	4a1d      	ldr	r2, [pc, #116]	; (80260 <SystemInit+0x90>)
   801ea:	4b1c      	ldr	r3, [pc, #112]	; (8025c <SystemInit+0x8c>)
   801ec:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801ee:	4b1b      	ldr	r3, [pc, #108]	; (8025c <SystemInit+0x8c>)
   801f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   801f2:	f013 0f01 	tst.w	r3, #1
   801f6:	d0fa      	beq.n	801ee <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801f8:	4a1a      	ldr	r2, [pc, #104]	; (80264 <SystemInit+0x94>)
   801fa:	4b18      	ldr	r3, [pc, #96]	; (8025c <SystemInit+0x8c>)
   801fc:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801fe:	4b17      	ldr	r3, [pc, #92]	; (8025c <SystemInit+0x8c>)
   80200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80202:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80206:	d0fa      	beq.n	801fe <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a14      	ldr	r2, [pc, #80]	; (8025c <SystemInit+0x8c>)
   8020a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8020c:	f023 0303 	bic.w	r3, r3, #3
   80210:	f043 0301 	orr.w	r3, r3, #1
   80214:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80216:	4b11      	ldr	r3, [pc, #68]	; (8025c <SystemInit+0x8c>)
   80218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8021a:	f013 0f08 	tst.w	r3, #8
   8021e:	d0fa      	beq.n	80216 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80220:	4a11      	ldr	r2, [pc, #68]	; (80268 <SystemInit+0x98>)
   80222:	4b0e      	ldr	r3, [pc, #56]	; (8025c <SystemInit+0x8c>)
   80224:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80226:	4b0d      	ldr	r3, [pc, #52]	; (8025c <SystemInit+0x8c>)
   80228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8022a:	f013 0f02 	tst.w	r3, #2
   8022e:	d0fa      	beq.n	80226 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80230:	2211      	movs	r2, #17
   80232:	4b0a      	ldr	r3, [pc, #40]	; (8025c <SystemInit+0x8c>)
   80234:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80236:	4b09      	ldr	r3, [pc, #36]	; (8025c <SystemInit+0x8c>)
   80238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8023a:	f013 0f08 	tst.w	r3, #8
   8023e:	d0fa      	beq.n	80236 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80240:	2212      	movs	r2, #18
   80242:	4b06      	ldr	r3, [pc, #24]	; (8025c <SystemInit+0x8c>)
   80244:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80246:	4b05      	ldr	r3, [pc, #20]	; (8025c <SystemInit+0x8c>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f013 0f08 	tst.w	r3, #8
   8024e:	d0fa      	beq.n	80246 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80250:	4a06      	ldr	r2, [pc, #24]	; (8026c <SystemInit+0x9c>)
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <SystemInit+0xa0>)
   80254:	601a      	str	r2, [r3, #0]
   80256:	4770      	bx	lr
   80258:	400e0a00 	.word	0x400e0a00
   8025c:	400e0600 	.word	0x400e0600
   80260:	00370809 	.word	0x00370809
   80264:	01370809 	.word	0x01370809
   80268:	20273f03 	.word	0x20273f03
   8026c:	0501bd00 	.word	0x0501bd00
   80270:	20000000 	.word	0x20000000

00080274 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch ( PMC->PMC_MCKR & PMC_MCKR_CSS_Msk )
   80274:	4b3e      	ldr	r3, [pc, #248]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80278:	f003 0303 	and.w	r3, r3, #3
   8027c:	2b03      	cmp	r3, #3
   8027e:	d83f      	bhi.n	80300 <SystemCoreClockUpdate+0x8c>
   80280:	e8df f003 	tbb	[pc, r3]
   80284:	2d2d1102 	.word	0x2d2d1102
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if (SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80288:	4b3a      	ldr	r3, [pc, #232]	; (80374 <SystemCoreClockUpdate+0x100>)
   8028a:	695b      	ldr	r3, [r3, #20]
   8028c:	f013 0f80 	tst.w	r3, #128	; 0x80
   80290:	d004      	beq.n	8029c <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80292:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80296:	4b38      	ldr	r3, [pc, #224]	; (80378 <SystemCoreClockUpdate+0x104>)
   80298:	601a      	str	r2, [r3, #0]
   8029a:	e031      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8029c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   802a0:	4b35      	ldr	r3, [pc, #212]	; (80378 <SystemCoreClockUpdate+0x104>)
   802a2:	601a      	str	r2, [r3, #0]
   802a4:	e02c      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)
   802a6:	4b32      	ldr	r3, [pc, #200]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802a8:	6a1b      	ldr	r3, [r3, #32]
   802aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   802ae:	d003      	beq.n	802b8 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
   802b0:	4a32      	ldr	r2, [pc, #200]	; (8037c <SystemCoreClockUpdate+0x108>)
   802b2:	4b31      	ldr	r3, [pc, #196]	; (80378 <SystemCoreClockUpdate+0x104>)
   802b4:	601a      	str	r2, [r3, #0]
   802b6:	e023      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   802b8:	4a31      	ldr	r2, [pc, #196]	; (80380 <SystemCoreClockUpdate+0x10c>)
   802ba:	4b2f      	ldr	r3, [pc, #188]	; (80378 <SystemCoreClockUpdate+0x104>)
   802bc:	601a      	str	r2, [r3, #0]

        switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk)
   802be:	4b2c      	ldr	r3, [pc, #176]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802c0:	6a1b      	ldr	r3, [r3, #32]
   802c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   802c6:	2b10      	cmp	r3, #16
   802c8:	d005      	beq.n	802d6 <SystemCoreClockUpdate+0x62>
   802ca:	2b20      	cmp	r3, #32
   802cc:	d118      	bne.n	80300 <SystemCoreClockUpdate+0x8c>
          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
          break;

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
   802ce:	4a2b      	ldr	r2, [pc, #172]	; (8037c <SystemCoreClockUpdate+0x108>)
   802d0:	4b29      	ldr	r3, [pc, #164]	; (80378 <SystemCoreClockUpdate+0x104>)
   802d2:	601a      	str	r2, [r3, #0]
          break;
   802d4:	e014      	b.n	80300 <SystemCoreClockUpdate+0x8c>
            SystemCoreClock *= 2U;
   802d6:	4a2b      	ldr	r2, [pc, #172]	; (80384 <SystemCoreClockUpdate+0x110>)
   802d8:	4b27      	ldr	r3, [pc, #156]	; (80378 <SystemCoreClockUpdate+0x104>)
   802da:	601a      	str	r2, [r3, #0]
          break;
   802dc:	e010      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK: /* PLLA clock */
    case PMC_MCKR_CSS_UPLL_CLK: /* UPLL clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
   802de:	4b24      	ldr	r3, [pc, #144]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802e0:	6a1b      	ldr	r3, [r3, #32]
   802e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   802e6:	d01a      	beq.n	8031e <SystemCoreClockUpdate+0xaa>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
   802e8:	4a24      	ldr	r2, [pc, #144]	; (8037c <SystemCoreClockUpdate+0x108>)
   802ea:	4b23      	ldr	r3, [pc, #140]	; (80378 <SystemCoreClockUpdate+0x104>)
   802ec:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
      if ( (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
   802ee:	4b20      	ldr	r3, [pc, #128]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   802f2:	f003 0303 	and.w	r3, r3, #3
   802f6:	2b02      	cmp	r3, #2
   802f8:	d024      	beq.n	80344 <SystemCoreClockUpdate+0xd0>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_UTMIPLL / 2U;
   802fa:	4a23      	ldr	r2, [pc, #140]	; (80388 <SystemCoreClockUpdate+0x114>)
   802fc:	4b1e      	ldr	r3, [pc, #120]	; (80378 <SystemCoreClockUpdate+0x104>)
   802fe:	601a      	str	r2, [r3, #0]
      }
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
   80300:	4b1b      	ldr	r3, [pc, #108]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80304:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80308:	2b70      	cmp	r3, #112	; 0x70
   8030a:	d029      	beq.n	80360 <SystemCoreClockUpdate+0xec>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
   8030c:	4b18      	ldr	r3, [pc, #96]	; (80370 <SystemCoreClockUpdate+0xfc>)
   8030e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80310:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80314:	4918      	ldr	r1, [pc, #96]	; (80378 <SystemCoreClockUpdate+0x104>)
   80316:	680b      	ldr	r3, [r1, #0]
   80318:	40d3      	lsrs	r3, r2
   8031a:	600b      	str	r3, [r1, #0]
   8031c:	4770      	bx	lr
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8031e:	4a18      	ldr	r2, [pc, #96]	; (80380 <SystemCoreClockUpdate+0x10c>)
   80320:	4b15      	ldr	r3, [pc, #84]	; (80378 <SystemCoreClockUpdate+0x104>)
   80322:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
   80324:	4b12      	ldr	r3, [pc, #72]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80326:	6a1b      	ldr	r3, [r3, #32]
   80328:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8032c:	2b10      	cmp	r3, #16
   8032e:	d005      	beq.n	8033c <SystemCoreClockUpdate+0xc8>
   80330:	2b20      	cmp	r3, #32
   80332:	d1dc      	bne.n	802ee <SystemCoreClockUpdate+0x7a>
            SystemCoreClock *= 3U;
   80334:	4a11      	ldr	r2, [pc, #68]	; (8037c <SystemCoreClockUpdate+0x108>)
   80336:	4b10      	ldr	r3, [pc, #64]	; (80378 <SystemCoreClockUpdate+0x104>)
   80338:	601a      	str	r2, [r3, #0]
          break;
   8033a:	e7d8      	b.n	802ee <SystemCoreClockUpdate+0x7a>
            SystemCoreClock *= 2U;
   8033c:	4a11      	ldr	r2, [pc, #68]	; (80384 <SystemCoreClockUpdate+0x110>)
   8033e:	4b0e      	ldr	r3, [pc, #56]	; (80378 <SystemCoreClockUpdate+0x104>)
   80340:	601a      	str	r2, [r3, #0]
          break;
   80342:	e7d4      	b.n	802ee <SystemCoreClockUpdate+0x7a>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
   80344:	480a      	ldr	r0, [pc, #40]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80346:	6a82      	ldr	r2, [r0, #40]	; 0x28
   80348:	f3c2 420a 	ubfx	r2, r2, #16, #11
   8034c:	490a      	ldr	r1, [pc, #40]	; (80378 <SystemCoreClockUpdate+0x104>)
   8034e:	680b      	ldr	r3, [r1, #0]
   80350:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
   80354:	6a82      	ldr	r2, [r0, #40]	; 0x28
   80356:	b2d2      	uxtb	r2, r2
   80358:	fbb3 f3f2 	udiv	r3, r3, r2
   8035c:	600b      	str	r3, [r1, #0]
   8035e:	e7cf      	b.n	80300 <SystemCoreClockUpdate+0x8c>
    SystemCoreClock /= 3U;
   80360:	4a05      	ldr	r2, [pc, #20]	; (80378 <SystemCoreClockUpdate+0x104>)
   80362:	6813      	ldr	r3, [r2, #0]
   80364:	4909      	ldr	r1, [pc, #36]	; (8038c <SystemCoreClockUpdate+0x118>)
   80366:	fba1 1303 	umull	r1, r3, r1, r3
   8036a:	085b      	lsrs	r3, r3, #1
   8036c:	6013      	str	r3, [r2, #0]
   8036e:	4770      	bx	lr
   80370:	400e0600 	.word	0x400e0600
   80374:	400e1a10 	.word	0x400e1a10
   80378:	20000000 	.word	0x20000000
   8037c:	00b71b00 	.word	0x00b71b00
   80380:	003d0900 	.word	0x003d0900
   80384:	007a1200 	.word	0x007a1200
   80388:	0e4e1c00 	.word	0x0e4e1c00
   8038c:	aaaaaaab 	.word	0xaaaaaaab

00080390 <Toggle_Output>:

void Toggle_Output(Pio *PORT,uint8_t PIN)
{
	static uint32_t t;

	t = (PORT->PIO_ODSR>>(PIN))&(0x1);
   80390:	6b83      	ldr	r3, [r0, #56]	; 0x38
   80392:	40cb      	lsrs	r3, r1
	if (t)//tests if LED PIO is active
   80394:	f013 0f01 	tst.w	r3, #1
   80398:	d104      	bne.n	803a4 <Toggle_Output+0x14>
	{
		PORT->PIO_CODR = 0x1 << PIN;
	}
	else
	{
		PORT->PIO_SODR= 0x1 << PIN;
   8039a:	2301      	movs	r3, #1
   8039c:	fa03 f101 	lsl.w	r1, r3, r1
   803a0:	6301      	str	r1, [r0, #48]	; 0x30
   803a2:	4770      	bx	lr
		PORT->PIO_CODR = 0x1 << PIN;
   803a4:	2301      	movs	r3, #1
   803a6:	fa03 f101 	lsl.w	r1, r3, r1
   803aa:	6341      	str	r1, [r0, #52]	; 0x34
   803ac:	4770      	bx	lr

000803ae <DELAY>:
	}
	    
}

void DELAY(uint32_t delay) //delay in ms
{
   803ae:	b082      	sub	sp, #8
	volatile uint32_t cnt = 0;
   803b0:	2300      	movs	r3, #0
   803b2:	9301      	str	r3, [sp, #4]
	if (delay>10000)//overflow protection
   803b4:	f242 7310 	movw	r3, #10000	; 0x2710
   803b8:	4298      	cmp	r0, r3
   803ba:	d900      	bls.n	803be <DELAY+0x10>
	{
		delay = 10000;
   803bc:	4618      	mov	r0, r3
	}
	delay = 6666*delay; //adjust delay to represent clock cycles
   803be:	f641 230a 	movw	r3, #6666	; 0x1a0a
   803c2:	fb03 f000 	mul.w	r0, r3, r0
	while(cnt<=delay)
   803c6:	e002      	b.n	803ce <DELAY+0x20>
	{
		cnt =cnt+1;
   803c8:	9b01      	ldr	r3, [sp, #4]
   803ca:	3301      	adds	r3, #1
   803cc:	9301      	str	r3, [sp, #4]
	while(cnt<=delay)
   803ce:	9b01      	ldr	r3, [sp, #4]
   803d0:	4298      	cmp	r0, r3
   803d2:	d2f9      	bcs.n	803c8 <DELAY+0x1a>
	}
   803d4:	b002      	add	sp, #8
   803d6:	4770      	bx	lr

000803d8 <main>:
{
   803d8:	b500      	push	{lr}
   803da:	b083      	sub	sp, #12
	volatile uint32_t a = 0;
   803dc:	2300      	movs	r3, #0
   803de:	9301      	str	r3, [sp, #4]
    SystemInit();
   803e0:	4b08      	ldr	r3, [pc, #32]	; (80404 <main+0x2c>)
   803e2:	4798      	blx	r3
	SystemCoreClockUpdate();
   803e4:	4b08      	ldr	r3, [pc, #32]	; (80408 <main+0x30>)
   803e6:	4798      	blx	r3
	PIO_INIT();//works
   803e8:	4b08      	ldr	r3, [pc, #32]	; (8040c <main+0x34>)
   803ea:	4798      	blx	r3
	TWI_init();
   803ec:	4b08      	ldr	r3, [pc, #32]	; (80410 <main+0x38>)
   803ee:	4798      	blx	r3
		DELAY(1000);
   803f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   803f4:	4b07      	ldr	r3, [pc, #28]	; (80414 <main+0x3c>)
   803f6:	4798      	blx	r3
		Toggle_Output(RED_PB26_PORT,RED_PB27_PIN);
   803f8:	211b      	movs	r1, #27
   803fa:	4807      	ldr	r0, [pc, #28]	; (80418 <main+0x40>)
   803fc:	4b07      	ldr	r3, [pc, #28]	; (8041c <main+0x44>)
   803fe:	4798      	blx	r3
   80400:	e7f6      	b.n	803f0 <main+0x18>
   80402:	bf00      	nop
   80404:	000801d1 	.word	0x000801d1
   80408:	00080275 	.word	0x00080275
   8040c:	000806a1 	.word	0x000806a1
   80410:	000806d5 	.word	0x000806d5
   80414:	000803af 	.word	0x000803af
   80418:	400e1000 	.word	0x400e1000
   8041c:	00080391 	.word	0x00080391

00080420 <PIO_IO_init>:
 */ 

#include "pio_init.h"

void PIO_IO_init(uint8_t IO, Pio *PORT, uint8_t PIN, uint8_t PIO)//initialize pin as Input (1) or Output(0); PIO -> 0=PIO control, 1=A peripheral, 2=B peripheral
{
   80420:	b430      	push	{r4, r5}
   80422:	b082      	sub	sp, #8
	volatile uint32_t t1;
	// Disables the Write Protect
	PORT ->PIO_WPMR =(PIO_WPMR_WPKEY(0x50494F))|~(PIO_WPMR_WPEN);
   80424:	f06f 0401 	mvn.w	r4, #1
   80428:	f8c1 40e4 	str.w	r4, [r1, #228]	; 0xe4
	// Grabs PIO Write Protect Status
	t1 =  PORT->PIO_PSR;
   8042c:	688c      	ldr	r4, [r1, #8]
   8042e:	9401      	str	r4, [sp, #4]
	t1 = (t1>>(PIN))&(0x1);//
   80430:	9c01      	ldr	r4, [sp, #4]
   80432:	40d4      	lsrs	r4, r2
   80434:	f004 0401 	and.w	r4, r4, #1
   80438:	9401      	str	r4, [sp, #4]
	t1=(~t1)&(0x1);
   8043a:	9c01      	ldr	r4, [sp, #4]
   8043c:	f084 0401 	eor.w	r4, r4, #1
   80440:	f004 0401 	and.w	r4, r4, #1
   80444:	9401      	str	r4, [sp, #4]
	if (t1)//tests if PIO is active
   80446:	9c01      	ldr	r4, [sp, #4]
   80448:	b104      	cbz	r4, 8044c <PIO_IO_init+0x2c>
   8044a:	e7fe      	b.n	8044a <PIO_IO_init+0x2a>
		while (1)
		{
			//fault pins PIO is inactive
		}
	}
	if (PIO==0)
   8044c:	b9a3      	cbnz	r3, 80478 <PIO_IO_init+0x58>
	{
		// Enables the PIO to control
		PORT->PIO_PER |=((0x1u << PIN));//set
   8044e:	680c      	ldr	r4, [r1, #0]
   80450:	2501      	movs	r5, #1
   80452:	4095      	lsls	r5, r2
   80454:	432c      	orrs	r4, r5
   80456:	600c      	str	r4, [r1, #0]
		
		// Grabs PIO Controller status for respective pins
		t1 =  PORT->PIO_PSR;
   80458:	688c      	ldr	r4, [r1, #8]
   8045a:	9401      	str	r4, [sp, #4]
		t1 = (t1>>(PIN)&(0x1));//
   8045c:	9c01      	ldr	r4, [sp, #4]
   8045e:	40d4      	lsrs	r4, r2
   80460:	f004 0401 	and.w	r4, r4, #1
   80464:	9401      	str	r4, [sp, #4]
		t1=(~t1)&(0x1);
   80466:	9c01      	ldr	r4, [sp, #4]
   80468:	f084 0401 	eor.w	r4, r4, #1
   8046c:	f004 0401 	and.w	r4, r4, #1
   80470:	9401      	str	r4, [sp, #4]
		if (t1)//tests if PIO is active
   80472:	9c01      	ldr	r4, [sp, #4]
   80474:	b1e4      	cbz	r4, 804b0 <PIO_IO_init+0x90>
   80476:	e7fe      	b.n	80476 <PIO_IO_init+0x56>
		}
	}
	else
	{
		// Disables the PIO to control
		PORT->PIO_PDR |=((0x1u << PIN));//set
   80478:	684c      	ldr	r4, [r1, #4]
   8047a:	2501      	movs	r5, #1
   8047c:	4095      	lsls	r5, r2
   8047e:	432c      	orrs	r4, r5
   80480:	604c      	str	r4, [r1, #4]
		// Grabs PIO Controller status for respective pin
		t1 = (PORT->PIO_PSR>>(PIN)&(0x1));//
   80482:	688c      	ldr	r4, [r1, #8]
   80484:	40d4      	lsrs	r4, r2
   80486:	f004 0401 	and.w	r4, r4, #1
   8048a:	9401      	str	r4, [sp, #4]
		if (t1)//tests if PIO is active
   8048c:	9c01      	ldr	r4, [sp, #4]
   8048e:	b104      	cbz	r4, 80492 <PIO_IO_init+0x72>
   80490:	e7fe      	b.n	80490 <PIO_IO_init+0x70>
			{
				//fault pins PIO is inactive
			}
		}
		
		if (PIO == 1)//PIO Peripheral AB
   80492:	2b01      	cmp	r3, #1
   80494:	d105      	bne.n	804a2 <PIO_IO_init+0x82>
		{
			PORT->PIO_ABSR&=(~0x1)<<PIN;//set peripheral to A
   80496:	6f0c      	ldr	r4, [r1, #112]	; 0x70
   80498:	f06f 0501 	mvn.w	r5, #1
   8049c:	4095      	lsls	r5, r2
   8049e:	402c      	ands	r4, r5
   804a0:	670c      	str	r4, [r1, #112]	; 0x70
		}
		if (PIO == 2)
   804a2:	2b02      	cmp	r3, #2
   804a4:	d104      	bne.n	804b0 <PIO_IO_init+0x90>
		{
			PORT->PIO_ABSR|=(0x1)<<PIN;//set peripheral to B
   804a6:	6f0c      	ldr	r4, [r1, #112]	; 0x70
   804a8:	2501      	movs	r5, #1
   804aa:	4095      	lsls	r5, r2
   804ac:	432c      	orrs	r4, r5
   804ae:	670c      	str	r4, [r1, #112]	; 0x70
		}
	}
	
	
	if (IO)
   804b0:	b160      	cbz	r0, 804cc <PIO_IO_init+0xac>
	{	// Disable the output line
		PORT->PIO_ODR |=(0x1u << PIN);//set
   804b2:	694c      	ldr	r4, [r1, #20]
   804b4:	2501      	movs	r5, #1
   804b6:	4095      	lsls	r5, r2
   804b8:	432c      	orrs	r4, r5
   804ba:	614c      	str	r4, [r1, #20]
		// Grabs PIO Controller Output Status for respective pins
		t1 = (PORT->PIO_OSR>>PIN)&(0x1);
   804bc:	698c      	ldr	r4, [r1, #24]
   804be:	40d4      	lsrs	r4, r2
   804c0:	f004 0401 	and.w	r4, r4, #1
   804c4:	9401      	str	r4, [sp, #4]
		if (t1)//tests if I/O is set correctly
   804c6:	9c01      	ldr	r4, [sp, #4]
   804c8:	b18c      	cbz	r4, 804ee <PIO_IO_init+0xce>
   804ca:	e7fe      	b.n	804ca <PIO_IO_init+0xaa>
			}
		}	
	} 
	else
	{	//Enable the output line
		PORT->PIO_OER |=((0x1u << PIN));//set
   804cc:	690c      	ldr	r4, [r1, #16]
   804ce:	2501      	movs	r5, #1
   804d0:	4095      	lsls	r5, r2
   804d2:	432c      	orrs	r4, r5
   804d4:	610c      	str	r4, [r1, #16]
		// Grabs PIO Controller Output Status for respective pins
		t1 = (PORT->PIO_OSR>>PIN);//
   804d6:	698c      	ldr	r4, [r1, #24]
   804d8:	40d4      	lsrs	r4, r2
   804da:	9401      	str	r4, [sp, #4]
		t1=(~(t1&(0x1)))&(0x1);
   804dc:	9c01      	ldr	r4, [sp, #4]
   804de:	f084 0401 	eor.w	r4, r4, #1
   804e2:	f004 0401 	and.w	r4, r4, #1
   804e6:	9401      	str	r4, [sp, #4]
		if (t1)//tests if I/O is set correctly
   804e8:	9c01      	ldr	r4, [sp, #4]
   804ea:	b104      	cbz	r4, 804ee <PIO_IO_init+0xce>
   804ec:	e7fe      	b.n	804ec <PIO_IO_init+0xcc>
	}
	
	
	
	// Grabs PIO Controller Input Filter Status for respective pins
	t1 = (PORT->PIO_IFER>>(PIN)&(0x0001));
   804ee:	6a0c      	ldr	r4, [r1, #32]
   804f0:	40d4      	lsrs	r4, r2
   804f2:	f004 0401 	and.w	r4, r4, #1
   804f6:	9401      	str	r4, [sp, #4]
	if (t1)//test if input glitch filter is disabled on the I/O line 
   804f8:	9c01      	ldr	r4, [sp, #4]
   804fa:	b104      	cbz	r4, 804fe <PIO_IO_init+0xde>
   804fc:	e7fe      	b.n	804fc <PIO_IO_init+0xdc>
		{
			//fault input glitch filter is enabled on the I/O line
		}
	}
	
	if ((~IO)&(0x1)&(PIO==0))
   804fe:	f080 0001 	eor.w	r0, r0, #1
   80502:	2b00      	cmp	r3, #0
   80504:	bf14      	ite	ne
   80506:	2300      	movne	r3, #0
   80508:	f000 0301 	andeq.w	r3, r0, #1
   8050c:	b1a3      	cbz	r3, 80538 <PIO_IO_init+0x118>
	{
		// Enables Output Write Enable Register
		PORT->PIO_OWER |=((0x1u << PIN));//set
   8050e:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
   80512:	2401      	movs	r4, #1
   80514:	4094      	lsls	r4, r2
   80516:	4320      	orrs	r0, r4
   80518:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0

		// GrabsPIO Output Write Status Register for respective pins
		t1 = (PORT->PIO_OWSR>>(PIN))&(0x1);
   8051c:	f8d1 10a8 	ldr.w	r1, [r1, #168]	; 0xa8
   80520:	fa21 f202 	lsr.w	r2, r1, r2
   80524:	f002 0201 	and.w	r2, r2, #1
   80528:	9201      	str	r2, [sp, #4]
		if ((~t1)&(0x1))// Writing PIO_ODSR affects the I/O line. 
   8052a:	9a01      	ldr	r2, [sp, #4]
   8052c:	f012 0f01 	tst.w	r2, #1
   80530:	d000      	beq.n	80534 <PIO_IO_init+0x114>
   80532:	2300      	movs	r3, #0
   80534:	b103      	cbz	r3, 80538 <PIO_IO_init+0x118>
   80536:	e7fe      	b.n	80536 <PIO_IO_init+0x116>
				//fault Writing PIO_ODSR does not affect the I/O line 
			}
		}
	}	
	
}
   80538:	b002      	add	sp, #8
   8053a:	bc30      	pop	{r4, r5}
   8053c:	4770      	bx	lr
	...

00080540 <LED_PIO_init>:

void LED_PIO_init(void)
{
   80540:	b510      	push	{r4, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   80542:	4b0c      	ldr	r3, [pc, #48]	; (80574 <LED_PIO_init+0x34>)
   80544:	f06f 0201 	mvn.w	r2, #1
   80548:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID11);//enable clock for port A
   8054c:	691a      	ldr	r2, [r3, #16]
   8054e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   80552:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (PMC_PCER0_PID12);//enable clock for port B
   80554:	691a      	ldr	r2, [r3, #16]
   80556:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8055a:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,RED_PB26_PORT,RED_PB27_PIN,PIO_control);
   8055c:	2300      	movs	r3, #0
   8055e:	221b      	movs	r2, #27
   80560:	4905      	ldr	r1, [pc, #20]	; (80578 <LED_PIO_init+0x38>)
   80562:	4618      	mov	r0, r3
   80564:	4c05      	ldr	r4, [pc, #20]	; (8057c <LED_PIO_init+0x3c>)
   80566:	47a0      	blx	r4
	PIO_IO_init(Input,GREEN_PA15_PORT,GREEN_PA15_PIN,PIO_control);
   80568:	2300      	movs	r3, #0
   8056a:	220f      	movs	r2, #15
   8056c:	4904      	ldr	r1, [pc, #16]	; (80580 <LED_PIO_init+0x40>)
   8056e:	2001      	movs	r0, #1
   80570:	47a0      	blx	r4
   80572:	bd10      	pop	{r4, pc}
   80574:	400e0600 	.word	0x400e0600
   80578:	400e1000 	.word	0x400e1000
   8057c:	00080421 	.word	0x00080421
   80580:	400e0e00 	.word	0x400e0e00

00080584 <USART_PIO_init>:
	
}

void USART_PIO_init(void)
{
   80584:	b538      	push	{r3, r4, r5, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   80586:	4b0b      	ldr	r3, [pc, #44]	; (805b4 <USART_PIO_init+0x30>)
   80588:	f06f 0201 	mvn.w	r2, #1
   8058c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID17);//enable clock for USART0
   80590:	691a      	ldr	r2, [r3, #16]
   80592:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   80596:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,TXD0_PA11_PORT,TXD0_PA11_PIN,Peripheral_A);
   80598:	4d07      	ldr	r5, [pc, #28]	; (805b8 <USART_PIO_init+0x34>)
   8059a:	2301      	movs	r3, #1
   8059c:	220b      	movs	r2, #11
   8059e:	4629      	mov	r1, r5
   805a0:	2000      	movs	r0, #0
   805a2:	4c06      	ldr	r4, [pc, #24]	; (805bc <USART_PIO_init+0x38>)
   805a4:	47a0      	blx	r4
	PIO_IO_init(Input,RDX0_PA10_PORT,RDX0_PA10_PIN,Peripheral_A);
   805a6:	2301      	movs	r3, #1
   805a8:	220a      	movs	r2, #10
   805aa:	4629      	mov	r1, r5
   805ac:	4618      	mov	r0, r3
   805ae:	47a0      	blx	r4
   805b0:	bd38      	pop	{r3, r4, r5, pc}
   805b2:	bf00      	nop
   805b4:	400e0600 	.word	0x400e0600
   805b8:	400e0e00 	.word	0x400e0e00
   805bc:	00080421 	.word	0x00080421

000805c0 <TWI0_PIO_init>:
	
}

void TWI0_PIO_init(void)
{
   805c0:	b538      	push	{r3, r4, r5, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   805c2:	4b0b      	ldr	r3, [pc, #44]	; (805f0 <TWI0_PIO_init+0x30>)
   805c4:	f06f 0201 	mvn.w	r2, #1
   805c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID22);//enable clock for TWI0
   805cc:	691a      	ldr	r2, [r3, #16]
   805ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   805d2:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,TWD0_SCL_PA18_PORT,TWD0_SCL_PA18_PIN,Peripheral_A);
   805d4:	4d07      	ldr	r5, [pc, #28]	; (805f4 <TWI0_PIO_init+0x34>)
   805d6:	2301      	movs	r3, #1
   805d8:	2212      	movs	r2, #18
   805da:	4629      	mov	r1, r5
   805dc:	2000      	movs	r0, #0
   805de:	4c06      	ldr	r4, [pc, #24]	; (805f8 <TWI0_PIO_init+0x38>)
   805e0:	47a0      	blx	r4
	PIO_IO_init(Output,TWD0_SDA_PA17_PORT,TWD0_SDA_PA17_PIN,Peripheral_A);
   805e2:	2301      	movs	r3, #1
   805e4:	2211      	movs	r2, #17
   805e6:	4629      	mov	r1, r5
   805e8:	2000      	movs	r0, #0
   805ea:	47a0      	blx	r4
   805ec:	bd38      	pop	{r3, r4, r5, pc}
   805ee:	bf00      	nop
   805f0:	400e0600 	.word	0x400e0600
   805f4:	400e0e00 	.word	0x400e0e00
   805f8:	00080421 	.word	0x00080421

000805fc <SPI_PIO_init>:
	PIO_IO_init(Output,PWML3_PA0_PORT,PWML3_PA0_PIN,Peripheral_B);
	
}

void SPI_PIO_init(void)
{
   805fc:	b538      	push	{r3, r4, r5, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   805fe:	4b0d      	ldr	r3, [pc, #52]	; (80634 <SPI_PIO_init+0x38>)
   80600:	f06f 0201 	mvn.w	r2, #1
   80604:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID24);//enable clock for SPI0
   80608:	691a      	ldr	r2, [r3, #16]
   8060a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8060e:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,SPI0_SPCK_PA27_PORT,SPI0_SPCK_PA27_PIN,Peripheral_A);
   80610:	4d09      	ldr	r5, [pc, #36]	; (80638 <SPI_PIO_init+0x3c>)
   80612:	2301      	movs	r3, #1
   80614:	221b      	movs	r2, #27
   80616:	4629      	mov	r1, r5
   80618:	2000      	movs	r0, #0
   8061a:	4c08      	ldr	r4, [pc, #32]	; (8063c <SPI_PIO_init+0x40>)
   8061c:	47a0      	blx	r4
	PIO_IO_init(Output,SPI0_MOSI_PA26_PORT,SPI0_MOSI_PA26_PIN,Peripheral_A);
   8061e:	2301      	movs	r3, #1
   80620:	221a      	movs	r2, #26
   80622:	4629      	mov	r1, r5
   80624:	2000      	movs	r0, #0
   80626:	47a0      	blx	r4
	PIO_IO_init(Input,SPI0_MISO_PA25_PORT,SPI0_MISO_PA25_PIN,Peripheral_A);
   80628:	2301      	movs	r3, #1
   8062a:	2219      	movs	r2, #25
   8062c:	4629      	mov	r1, r5
   8062e:	4618      	mov	r0, r3
   80630:	47a0      	blx	r4
   80632:	bd38      	pop	{r3, r4, r5, pc}
   80634:	400e0600 	.word	0x400e0600
   80638:	400e0e00 	.word	0x400e0e00
   8063c:	00080421 	.word	0x00080421

00080640 <ADC_PIO_init>:
	
}


void ADC_PIO_init(void)
{
   80640:	b510      	push	{r4, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   80642:	4b08      	ldr	r3, [pc, #32]	; (80664 <ADC_PIO_init+0x24>)
   80644:	f06f 0201 	mvn.w	r2, #1
   80648:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER1_PID37);//enable clock for SPI0
   8064c:	691a      	ldr	r2, [r3, #16]
   8064e:	f042 0220 	orr.w	r2, r2, #32
   80652:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Input,REF1V65_AD0_PA2_PORT,REF1V65_AD0_PA2_PIN,Alternate_function);
   80654:	2303      	movs	r3, #3
   80656:	2202      	movs	r2, #2
   80658:	4903      	ldr	r1, [pc, #12]	; (80668 <ADC_PIO_init+0x28>)
   8065a:	2001      	movs	r0, #1
   8065c:	4c03      	ldr	r4, [pc, #12]	; (8066c <ADC_PIO_init+0x2c>)
   8065e:	47a0      	blx	r4
   80660:	bd10      	pop	{r4, pc}
   80662:	bf00      	nop
   80664:	400e0600 	.word	0x400e0600
   80668:	400e0e00 	.word	0x400e0e00
   8066c:	00080421 	.word	0x00080421

00080670 <DAC_PIO_init>:
}

void DAC_PIO_init(void)
{
   80670:	b510      	push	{r4, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   80672:	4b08      	ldr	r3, [pc, #32]	; (80694 <DAC_PIO_init+0x24>)
   80674:	f06f 0201 	mvn.w	r2, #1
   80678:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER1_PID38);//enable clock for SPI0
   8067c:	691a      	ldr	r2, [r3, #16]
   8067e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80682:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,DAC1_PB16_PORT,DAC1_PB16_PIN,Alternate_function);
   80684:	2303      	movs	r3, #3
   80686:	2210      	movs	r2, #16
   80688:	4903      	ldr	r1, [pc, #12]	; (80698 <DAC_PIO_init+0x28>)
   8068a:	2000      	movs	r0, #0
   8068c:	4c03      	ldr	r4, [pc, #12]	; (8069c <DAC_PIO_init+0x2c>)
   8068e:	47a0      	blx	r4
   80690:	bd10      	pop	{r4, pc}
   80692:	bf00      	nop
   80694:	400e0600 	.word	0x400e0600
   80698:	400e1000 	.word	0x400e1000
   8069c:	00080421 	.word	0x00080421

000806a0 <PIO_INIT>:
	
}


void PIO_INIT(void)
{
   806a0:	b508      	push	{r3, lr}
	LED_PIO_init();
   806a2:	4b06      	ldr	r3, [pc, #24]	; (806bc <PIO_INIT+0x1c>)
   806a4:	4798      	blx	r3
	USART_PIO_init();
   806a6:	4b06      	ldr	r3, [pc, #24]	; (806c0 <PIO_INIT+0x20>)
   806a8:	4798      	blx	r3
	TWI0_PIO_init();
   806aa:	4b06      	ldr	r3, [pc, #24]	; (806c4 <PIO_INIT+0x24>)
   806ac:	4798      	blx	r3
	SPI_PIO_init();
   806ae:	4b06      	ldr	r3, [pc, #24]	; (806c8 <PIO_INIT+0x28>)
   806b0:	4798      	blx	r3
	ADC_PIO_init();
   806b2:	4b06      	ldr	r3, [pc, #24]	; (806cc <PIO_INIT+0x2c>)
   806b4:	4798      	blx	r3
	DAC_PIO_init();
   806b6:	4b06      	ldr	r3, [pc, #24]	; (806d0 <PIO_INIT+0x30>)
   806b8:	4798      	blx	r3
   806ba:	bd08      	pop	{r3, pc}
   806bc:	00080541 	.word	0x00080541
   806c0:	00080585 	.word	0x00080585
   806c4:	000805c1 	.word	0x000805c1
   806c8:	000805fd 	.word	0x000805fd
   806cc:	00080641 	.word	0x00080641
   806d0:	00080671 	.word	0x00080671

000806d4 <TWI_init>:
#include "TWI_init_SAM.h"

void TWI_init(void)
{
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   806d4:	4b0a      	ldr	r3, [pc, #40]	; (80700 <TWI_init+0x2c>)
   806d6:	f06f 0201 	mvn.w	r2, #1
   806da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID22);//enable clock for TWI0
   806de:	691a      	ldr	r2, [r3, #16]
   806e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   806e4:	611a      	str	r2, [r3, #16]
	//Set clock period L and H = 1.25e-6
	TWI0->TWI_CWGR = TWI_CWGR_CLDIV(0x30)|TWI_CWGR_CHDIV(0x30)|TWI_CWGR_CKDIV(0x1);
   806e6:	4b07      	ldr	r3, [pc, #28]	; (80704 <TWI_init+0x30>)
   806e8:	4a07      	ldr	r2, [pc, #28]	; (80708 <TWI_init+0x34>)
   806ea:	611a      	str	r2, [r3, #16]
	//Disable Slave mode
	TWI0->TWI_CR |= TWI_CR_SVDIS;
   806ec:	681a      	ldr	r2, [r3, #0]
   806ee:	f042 0220 	orr.w	r2, r2, #32
   806f2:	601a      	str	r2, [r3, #0]
	//Enable Master mode 
	TWI0->TWI_CR |=  TWI_CR_MSEN;
   806f4:	681a      	ldr	r2, [r3, #0]
   806f6:	f042 0204 	orr.w	r2, r2, #4
   806fa:	601a      	str	r2, [r3, #0]
   806fc:	4770      	bx	lr
   806fe:	bf00      	nop
   80700:	400e0600 	.word	0x400e0600
   80704:	4008c000 	.word	0x4008c000
   80708:	00013030 	.word	0x00013030

0008070c <__libc_init_array>:
   8070c:	b570      	push	{r4, r5, r6, lr}
   8070e:	4e0f      	ldr	r6, [pc, #60]	; (8074c <__libc_init_array+0x40>)
   80710:	4d0f      	ldr	r5, [pc, #60]	; (80750 <__libc_init_array+0x44>)
   80712:	1b76      	subs	r6, r6, r5
   80714:	10b6      	asrs	r6, r6, #2
   80716:	bf18      	it	ne
   80718:	2400      	movne	r4, #0
   8071a:	d005      	beq.n	80728 <__libc_init_array+0x1c>
   8071c:	3401      	adds	r4, #1
   8071e:	f855 3b04 	ldr.w	r3, [r5], #4
   80722:	4798      	blx	r3
   80724:	42a6      	cmp	r6, r4
   80726:	d1f9      	bne.n	8071c <__libc_init_array+0x10>
   80728:	4e0a      	ldr	r6, [pc, #40]	; (80754 <__libc_init_array+0x48>)
   8072a:	4d0b      	ldr	r5, [pc, #44]	; (80758 <__libc_init_array+0x4c>)
   8072c:	f000 f8a8 	bl	80880 <_init>
   80730:	1b76      	subs	r6, r6, r5
   80732:	10b6      	asrs	r6, r6, #2
   80734:	bf18      	it	ne
   80736:	2400      	movne	r4, #0
   80738:	d006      	beq.n	80748 <__libc_init_array+0x3c>
   8073a:	3401      	adds	r4, #1
   8073c:	f855 3b04 	ldr.w	r3, [r5], #4
   80740:	4798      	blx	r3
   80742:	42a6      	cmp	r6, r4
   80744:	d1f9      	bne.n	8073a <__libc_init_array+0x2e>
   80746:	bd70      	pop	{r4, r5, r6, pc}
   80748:	bd70      	pop	{r4, r5, r6, pc}
   8074a:	bf00      	nop
   8074c:	0008088c 	.word	0x0008088c
   80750:	0008088c 	.word	0x0008088c
   80754:	00080894 	.word	0x00080894
   80758:	0008088c 	.word	0x0008088c

0008075c <register_fini>:
   8075c:	4b02      	ldr	r3, [pc, #8]	; (80768 <register_fini+0xc>)
   8075e:	b113      	cbz	r3, 80766 <register_fini+0xa>
   80760:	4802      	ldr	r0, [pc, #8]	; (8076c <register_fini+0x10>)
   80762:	f000 b805 	b.w	80770 <atexit>
   80766:	4770      	bx	lr
   80768:	00000000 	.word	0x00000000
   8076c:	0008077d 	.word	0x0008077d

00080770 <atexit>:
   80770:	2300      	movs	r3, #0
   80772:	4601      	mov	r1, r0
   80774:	461a      	mov	r2, r3
   80776:	4618      	mov	r0, r3
   80778:	f000 b81e 	b.w	807b8 <__register_exitproc>

0008077c <__libc_fini_array>:
   8077c:	b538      	push	{r3, r4, r5, lr}
   8077e:	4c0a      	ldr	r4, [pc, #40]	; (807a8 <__libc_fini_array+0x2c>)
   80780:	4d0a      	ldr	r5, [pc, #40]	; (807ac <__libc_fini_array+0x30>)
   80782:	1b64      	subs	r4, r4, r5
   80784:	10a4      	asrs	r4, r4, #2
   80786:	d00a      	beq.n	8079e <__libc_fini_array+0x22>
   80788:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8078c:	3b01      	subs	r3, #1
   8078e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80792:	3c01      	subs	r4, #1
   80794:	f855 3904 	ldr.w	r3, [r5], #-4
   80798:	4798      	blx	r3
   8079a:	2c00      	cmp	r4, #0
   8079c:	d1f9      	bne.n	80792 <__libc_fini_array+0x16>
   8079e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   807a2:	f000 b877 	b.w	80894 <_fini>
   807a6:	bf00      	nop
   807a8:	000808a4 	.word	0x000808a4
   807ac:	000808a0 	.word	0x000808a0

000807b0 <__retarget_lock_acquire_recursive>:
   807b0:	4770      	bx	lr
   807b2:	bf00      	nop

000807b4 <__retarget_lock_release_recursive>:
   807b4:	4770      	bx	lr
   807b6:	bf00      	nop

000807b8 <__register_exitproc>:
   807b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807bc:	4d2c      	ldr	r5, [pc, #176]	; (80870 <__register_exitproc+0xb8>)
   807be:	4606      	mov	r6, r0
   807c0:	6828      	ldr	r0, [r5, #0]
   807c2:	4698      	mov	r8, r3
   807c4:	460f      	mov	r7, r1
   807c6:	4691      	mov	r9, r2
   807c8:	f7ff fff2 	bl	807b0 <__retarget_lock_acquire_recursive>
   807cc:	4b29      	ldr	r3, [pc, #164]	; (80874 <__register_exitproc+0xbc>)
   807ce:	681c      	ldr	r4, [r3, #0]
   807d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   807d4:	2b00      	cmp	r3, #0
   807d6:	d03e      	beq.n	80856 <__register_exitproc+0x9e>
   807d8:	685a      	ldr	r2, [r3, #4]
   807da:	2a1f      	cmp	r2, #31
   807dc:	dc1c      	bgt.n	80818 <__register_exitproc+0x60>
   807de:	f102 0e01 	add.w	lr, r2, #1
   807e2:	b176      	cbz	r6, 80802 <__register_exitproc+0x4a>
   807e4:	2101      	movs	r1, #1
   807e6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   807ea:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   807ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   807f2:	4091      	lsls	r1, r2
   807f4:	4308      	orrs	r0, r1
   807f6:	2e02      	cmp	r6, #2
   807f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   807fc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80800:	d023      	beq.n	8084a <__register_exitproc+0x92>
   80802:	3202      	adds	r2, #2
   80804:	f8c3 e004 	str.w	lr, [r3, #4]
   80808:	6828      	ldr	r0, [r5, #0]
   8080a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8080e:	f7ff ffd1 	bl	807b4 <__retarget_lock_release_recursive>
   80812:	2000      	movs	r0, #0
   80814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80818:	4b17      	ldr	r3, [pc, #92]	; (80878 <__register_exitproc+0xc0>)
   8081a:	b30b      	cbz	r3, 80860 <__register_exitproc+0xa8>
   8081c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80820:	f3af 8000 	nop.w
   80824:	4603      	mov	r3, r0
   80826:	b1d8      	cbz	r0, 80860 <__register_exitproc+0xa8>
   80828:	2000      	movs	r0, #0
   8082a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8082e:	f04f 0e01 	mov.w	lr, #1
   80832:	6058      	str	r0, [r3, #4]
   80834:	6019      	str	r1, [r3, #0]
   80836:	4602      	mov	r2, r0
   80838:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8083c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80840:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80844:	2e00      	cmp	r6, #0
   80846:	d0dc      	beq.n	80802 <__register_exitproc+0x4a>
   80848:	e7cc      	b.n	807e4 <__register_exitproc+0x2c>
   8084a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8084e:	4301      	orrs	r1, r0
   80850:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80854:	e7d5      	b.n	80802 <__register_exitproc+0x4a>
   80856:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8085a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8085e:	e7bb      	b.n	807d8 <__register_exitproc+0x20>
   80860:	6828      	ldr	r0, [r5, #0]
   80862:	f7ff ffa7 	bl	807b4 <__retarget_lock_release_recursive>
   80866:	f04f 30ff 	mov.w	r0, #4294967295
   8086a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8086e:	bf00      	nop
   80870:	20000430 	.word	0x20000430
   80874:	0008087c 	.word	0x0008087c
   80878:	00000000 	.word	0x00000000

0008087c <_global_impure_ptr>:
   8087c:	20000008                                ... 

00080880 <_init>:
   80880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80882:	bf00      	nop
   80884:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80886:	bc08      	pop	{r3}
   80888:	469e      	mov	lr, r3
   8088a:	4770      	bx	lr

0008088c <__init_array_start>:
   8088c:	0008075d 	.word	0x0008075d

00080890 <__frame_dummy_init_array_entry>:
   80890:	00080119                                ....

00080894 <_fini>:
   80894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80896:	bf00      	nop
   80898:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8089a:	bc08      	pop	{r3}
   8089c:	469e      	mov	lr, r3
   8089e:	4770      	bx	lr

000808a0 <__fini_array_start>:
   808a0:	000800f5 	.word	0x000800f5
