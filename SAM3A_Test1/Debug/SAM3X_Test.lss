
SAM3X_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080be0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00081014  00020434  2**2
                  ALLOC
  3 .stack        00000404  20000474  00081054  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000878  00081458  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000037d0  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a97  00000000  00000000  00023c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000040e  00000000  00000000  0002471d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001d8  00000000  00000000  00024b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00024d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000121f7  00000000  00000000  00024e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000044f2  00000000  00000000  00037022  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051726  00000000  00000000  0003b514  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004c8  00000000  00000000  0008cc3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	78 08 00 20 65 01 08 00 61 01 08 00 61 01 08 00     x.. e...a...a...
   80010:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   8003c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8004c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8005c:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
   8006c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
	...
   80084:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   80094:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   800b4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800c4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800d4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800e4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080be0 	.word	0x00080be0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080be0 	.word	0x00080be0
   80154:	20000438 	.word	0x20000438
   80158:	00080be0 	.word	0x00080be0
   8015c:	00000000 	.word	0x00000000

00080160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80160:	e7fe      	b.n	80160 <Dummy_Handler>
	...

00080164 <Reset_Handler>:
{
   80164:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80166:	4b11      	ldr	r3, [pc, #68]	; (801ac <Reset_Handler+0x48>)
   80168:	4a11      	ldr	r2, [pc, #68]	; (801b0 <Reset_Handler+0x4c>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d009      	beq.n	80182 <Reset_Handler+0x1e>
   8016e:	4b0f      	ldr	r3, [pc, #60]	; (801ac <Reset_Handler+0x48>)
   80170:	4a0f      	ldr	r2, [pc, #60]	; (801b0 <Reset_Handler+0x4c>)
   80172:	e003      	b.n	8017c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80174:	6811      	ldr	r1, [r2, #0]
   80176:	6019      	str	r1, [r3, #0]
   80178:	3304      	adds	r3, #4
   8017a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8017c:	490d      	ldr	r1, [pc, #52]	; (801b4 <Reset_Handler+0x50>)
   8017e:	428b      	cmp	r3, r1
   80180:	d3f8      	bcc.n	80174 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80182:	4b0d      	ldr	r3, [pc, #52]	; (801b8 <Reset_Handler+0x54>)
   80184:	e002      	b.n	8018c <Reset_Handler+0x28>
                *pDest++ = 0;
   80186:	2200      	movs	r2, #0
   80188:	601a      	str	r2, [r3, #0]
   8018a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8018c:	4a0b      	ldr	r2, [pc, #44]	; (801bc <Reset_Handler+0x58>)
   8018e:	4293      	cmp	r3, r2
   80190:	d3f9      	bcc.n	80186 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80192:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x5c>)
   80194:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8019c:	4a09      	ldr	r2, [pc, #36]	; (801c4 <Reset_Handler+0x60>)
   8019e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   801a0:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x64>)
   801a2:	4798      	blx	r3
        main();
   801a4:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x68>)
   801a6:	4798      	blx	r3
   801a8:	e7fe      	b.n	801a8 <Reset_Handler+0x44>
   801aa:	bf00      	nop
   801ac:	20000000 	.word	0x20000000
   801b0:	00080be0 	.word	0x00080be0
   801b4:	20000434 	.word	0x20000434
   801b8:	20000434 	.word	0x20000434
   801bc:	20000474 	.word	0x20000474
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	00080a49 	.word	0x00080a49
   801cc:	0008041d 	.word	0x0008041d

000801d0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801d4:	4a20      	ldr	r2, [pc, #128]	; (80258 <SystemInit+0x88>)
   801d6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   801dc:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801de:	4b1f      	ldr	r3, [pc, #124]	; (8025c <SystemInit+0x8c>)
   801e0:	6a1b      	ldr	r3, [r3, #32]
   801e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   801e6:	d107      	bne.n	801f8 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801e8:	4a1d      	ldr	r2, [pc, #116]	; (80260 <SystemInit+0x90>)
   801ea:	4b1c      	ldr	r3, [pc, #112]	; (8025c <SystemInit+0x8c>)
   801ec:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801ee:	4b1b      	ldr	r3, [pc, #108]	; (8025c <SystemInit+0x8c>)
   801f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   801f2:	f013 0f01 	tst.w	r3, #1
   801f6:	d0fa      	beq.n	801ee <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801f8:	4a1a      	ldr	r2, [pc, #104]	; (80264 <SystemInit+0x94>)
   801fa:	4b18      	ldr	r3, [pc, #96]	; (8025c <SystemInit+0x8c>)
   801fc:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801fe:	4b17      	ldr	r3, [pc, #92]	; (8025c <SystemInit+0x8c>)
   80200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80202:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80206:	d0fa      	beq.n	801fe <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a14      	ldr	r2, [pc, #80]	; (8025c <SystemInit+0x8c>)
   8020a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8020c:	f023 0303 	bic.w	r3, r3, #3
   80210:	f043 0301 	orr.w	r3, r3, #1
   80214:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80216:	4b11      	ldr	r3, [pc, #68]	; (8025c <SystemInit+0x8c>)
   80218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8021a:	f013 0f08 	tst.w	r3, #8
   8021e:	d0fa      	beq.n	80216 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80220:	4a11      	ldr	r2, [pc, #68]	; (80268 <SystemInit+0x98>)
   80222:	4b0e      	ldr	r3, [pc, #56]	; (8025c <SystemInit+0x8c>)
   80224:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80226:	4b0d      	ldr	r3, [pc, #52]	; (8025c <SystemInit+0x8c>)
   80228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8022a:	f013 0f02 	tst.w	r3, #2
   8022e:	d0fa      	beq.n	80226 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80230:	2211      	movs	r2, #17
   80232:	4b0a      	ldr	r3, [pc, #40]	; (8025c <SystemInit+0x8c>)
   80234:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80236:	4b09      	ldr	r3, [pc, #36]	; (8025c <SystemInit+0x8c>)
   80238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8023a:	f013 0f08 	tst.w	r3, #8
   8023e:	d0fa      	beq.n	80236 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80240:	2212      	movs	r2, #18
   80242:	4b06      	ldr	r3, [pc, #24]	; (8025c <SystemInit+0x8c>)
   80244:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80246:	4b05      	ldr	r3, [pc, #20]	; (8025c <SystemInit+0x8c>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f013 0f08 	tst.w	r3, #8
   8024e:	d0fa      	beq.n	80246 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80250:	4a06      	ldr	r2, [pc, #24]	; (8026c <SystemInit+0x9c>)
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <SystemInit+0xa0>)
   80254:	601a      	str	r2, [r3, #0]
   80256:	4770      	bx	lr
   80258:	400e0a00 	.word	0x400e0a00
   8025c:	400e0600 	.word	0x400e0600
   80260:	00370809 	.word	0x00370809
   80264:	01370809 	.word	0x01370809
   80268:	20273f03 	.word	0x20273f03
   8026c:	0501bd00 	.word	0x0501bd00
   80270:	20000000 	.word	0x20000000

00080274 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch ( PMC->PMC_MCKR & PMC_MCKR_CSS_Msk )
   80274:	4b3e      	ldr	r3, [pc, #248]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80278:	f003 0303 	and.w	r3, r3, #3
   8027c:	2b03      	cmp	r3, #3
   8027e:	d83f      	bhi.n	80300 <SystemCoreClockUpdate+0x8c>
   80280:	e8df f003 	tbb	[pc, r3]
   80284:	2d2d1102 	.word	0x2d2d1102
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if (SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80288:	4b3a      	ldr	r3, [pc, #232]	; (80374 <SystemCoreClockUpdate+0x100>)
   8028a:	695b      	ldr	r3, [r3, #20]
   8028c:	f013 0f80 	tst.w	r3, #128	; 0x80
   80290:	d004      	beq.n	8029c <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80292:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80296:	4b38      	ldr	r3, [pc, #224]	; (80378 <SystemCoreClockUpdate+0x104>)
   80298:	601a      	str	r2, [r3, #0]
   8029a:	e031      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8029c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   802a0:	4b35      	ldr	r3, [pc, #212]	; (80378 <SystemCoreClockUpdate+0x104>)
   802a2:	601a      	str	r2, [r3, #0]
   802a4:	e02c      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)
   802a6:	4b32      	ldr	r3, [pc, #200]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802a8:	6a1b      	ldr	r3, [r3, #32]
   802aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   802ae:	d003      	beq.n	802b8 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
   802b0:	4a32      	ldr	r2, [pc, #200]	; (8037c <SystemCoreClockUpdate+0x108>)
   802b2:	4b31      	ldr	r3, [pc, #196]	; (80378 <SystemCoreClockUpdate+0x104>)
   802b4:	601a      	str	r2, [r3, #0]
   802b6:	e023      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   802b8:	4a31      	ldr	r2, [pc, #196]	; (80380 <SystemCoreClockUpdate+0x10c>)
   802ba:	4b2f      	ldr	r3, [pc, #188]	; (80378 <SystemCoreClockUpdate+0x104>)
   802bc:	601a      	str	r2, [r3, #0]

        switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk)
   802be:	4b2c      	ldr	r3, [pc, #176]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802c0:	6a1b      	ldr	r3, [r3, #32]
   802c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   802c6:	2b10      	cmp	r3, #16
   802c8:	d005      	beq.n	802d6 <SystemCoreClockUpdate+0x62>
   802ca:	2b20      	cmp	r3, #32
   802cc:	d118      	bne.n	80300 <SystemCoreClockUpdate+0x8c>
          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
          break;

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
   802ce:	4a2b      	ldr	r2, [pc, #172]	; (8037c <SystemCoreClockUpdate+0x108>)
   802d0:	4b29      	ldr	r3, [pc, #164]	; (80378 <SystemCoreClockUpdate+0x104>)
   802d2:	601a      	str	r2, [r3, #0]
          break;
   802d4:	e014      	b.n	80300 <SystemCoreClockUpdate+0x8c>
            SystemCoreClock *= 2U;
   802d6:	4a2b      	ldr	r2, [pc, #172]	; (80384 <SystemCoreClockUpdate+0x110>)
   802d8:	4b27      	ldr	r3, [pc, #156]	; (80378 <SystemCoreClockUpdate+0x104>)
   802da:	601a      	str	r2, [r3, #0]
          break;
   802dc:	e010      	b.n	80300 <SystemCoreClockUpdate+0x8c>
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK: /* PLLA clock */
    case PMC_MCKR_CSS_UPLL_CLK: /* UPLL clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
   802de:	4b24      	ldr	r3, [pc, #144]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802e0:	6a1b      	ldr	r3, [r3, #32]
   802e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   802e6:	d01a      	beq.n	8031e <SystemCoreClockUpdate+0xaa>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
   802e8:	4a24      	ldr	r2, [pc, #144]	; (8037c <SystemCoreClockUpdate+0x108>)
   802ea:	4b23      	ldr	r3, [pc, #140]	; (80378 <SystemCoreClockUpdate+0x104>)
   802ec:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
      if ( (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
   802ee:	4b20      	ldr	r3, [pc, #128]	; (80370 <SystemCoreClockUpdate+0xfc>)
   802f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   802f2:	f003 0303 	and.w	r3, r3, #3
   802f6:	2b02      	cmp	r3, #2
   802f8:	d024      	beq.n	80344 <SystemCoreClockUpdate+0xd0>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_UTMIPLL / 2U;
   802fa:	4a23      	ldr	r2, [pc, #140]	; (80388 <SystemCoreClockUpdate+0x114>)
   802fc:	4b1e      	ldr	r3, [pc, #120]	; (80378 <SystemCoreClockUpdate+0x104>)
   802fe:	601a      	str	r2, [r3, #0]
      }
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
   80300:	4b1b      	ldr	r3, [pc, #108]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80304:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80308:	2b70      	cmp	r3, #112	; 0x70
   8030a:	d029      	beq.n	80360 <SystemCoreClockUpdate+0xec>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
   8030c:	4b18      	ldr	r3, [pc, #96]	; (80370 <SystemCoreClockUpdate+0xfc>)
   8030e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80310:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80314:	4918      	ldr	r1, [pc, #96]	; (80378 <SystemCoreClockUpdate+0x104>)
   80316:	680b      	ldr	r3, [r1, #0]
   80318:	40d3      	lsrs	r3, r2
   8031a:	600b      	str	r3, [r1, #0]
   8031c:	4770      	bx	lr
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8031e:	4a18      	ldr	r2, [pc, #96]	; (80380 <SystemCoreClockUpdate+0x10c>)
   80320:	4b15      	ldr	r3, [pc, #84]	; (80378 <SystemCoreClockUpdate+0x104>)
   80322:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
   80324:	4b12      	ldr	r3, [pc, #72]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80326:	6a1b      	ldr	r3, [r3, #32]
   80328:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8032c:	2b10      	cmp	r3, #16
   8032e:	d005      	beq.n	8033c <SystemCoreClockUpdate+0xc8>
   80330:	2b20      	cmp	r3, #32
   80332:	d1dc      	bne.n	802ee <SystemCoreClockUpdate+0x7a>
            SystemCoreClock *= 3U;
   80334:	4a11      	ldr	r2, [pc, #68]	; (8037c <SystemCoreClockUpdate+0x108>)
   80336:	4b10      	ldr	r3, [pc, #64]	; (80378 <SystemCoreClockUpdate+0x104>)
   80338:	601a      	str	r2, [r3, #0]
          break;
   8033a:	e7d8      	b.n	802ee <SystemCoreClockUpdate+0x7a>
            SystemCoreClock *= 2U;
   8033c:	4a11      	ldr	r2, [pc, #68]	; (80384 <SystemCoreClockUpdate+0x110>)
   8033e:	4b0e      	ldr	r3, [pc, #56]	; (80378 <SystemCoreClockUpdate+0x104>)
   80340:	601a      	str	r2, [r3, #0]
          break;
   80342:	e7d4      	b.n	802ee <SystemCoreClockUpdate+0x7a>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
   80344:	480a      	ldr	r0, [pc, #40]	; (80370 <SystemCoreClockUpdate+0xfc>)
   80346:	6a82      	ldr	r2, [r0, #40]	; 0x28
   80348:	f3c2 420a 	ubfx	r2, r2, #16, #11
   8034c:	490a      	ldr	r1, [pc, #40]	; (80378 <SystemCoreClockUpdate+0x104>)
   8034e:	680b      	ldr	r3, [r1, #0]
   80350:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
   80354:	6a82      	ldr	r2, [r0, #40]	; 0x28
   80356:	b2d2      	uxtb	r2, r2
   80358:	fbb3 f3f2 	udiv	r3, r3, r2
   8035c:	600b      	str	r3, [r1, #0]
   8035e:	e7cf      	b.n	80300 <SystemCoreClockUpdate+0x8c>
    SystemCoreClock /= 3U;
   80360:	4a05      	ldr	r2, [pc, #20]	; (80378 <SystemCoreClockUpdate+0x104>)
   80362:	6813      	ldr	r3, [r2, #0]
   80364:	4909      	ldr	r1, [pc, #36]	; (8038c <SystemCoreClockUpdate+0x118>)
   80366:	fba1 1303 	umull	r1, r3, r1, r3
   8036a:	085b      	lsrs	r3, r3, #1
   8036c:	6013      	str	r3, [r2, #0]
   8036e:	4770      	bx	lr
   80370:	400e0600 	.word	0x400e0600
   80374:	400e1a10 	.word	0x400e1a10
   80378:	20000000 	.word	0x20000000
   8037c:	00b71b00 	.word	0x00b71b00
   80380:	003d0900 	.word	0x003d0900
   80384:	007a1200 	.word	0x007a1200
   80388:	0e4e1c00 	.word	0x0e4e1c00
   8038c:	aaaaaaab 	.word	0xaaaaaaab

00080390 <Set_Duty_Cycle_Synchronous_Channels>:
	PWM_sel->PWM_CDTYUPDx &= ~PWM_CDTYUPD_CDTYUPD_Msk;//reset
	PWM_sel->PWM_CDTYUPDx |= PWM_CDTYUPD_CDTYUPD(t);//set PWM
}

void Set_Duty_Cycle_Synchronous_Channels(uint8_t Duty_Cycle, PWMx *PWM_sel)
{
   80390:	b082      	sub	sp, #8
	volatile uint32_t t ;
	if (Duty_Cycle>100)
   80392:	2864      	cmp	r0, #100	; 0x64
   80394:	d900      	bls.n	80398 <Set_Duty_Cycle_Synchronous_Channels+0x8>
	{
		Duty_Cycle=100;
   80396:	2064      	movs	r0, #100	; 0x64
	}
	t=PWM0->PWM_CPRDx&0xFFF;//grab channel PWM period
   80398:	4b0d      	ldr	r3, [pc, #52]	; (803d0 <Set_Duty_Cycle_Synchronous_Channels+0x40>)
   8039a:	68db      	ldr	r3, [r3, #12]
   8039c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   803a0:	9301      	str	r3, [sp, #4]
	t = (int)((long)Duty_Cycle*(long)t/100);//calculate Duty Cycle update value as ratio of channel period
   803a2:	9b01      	ldr	r3, [sp, #4]
   803a4:	fb03 f000 	mul.w	r0, r3, r0
   803a8:	4b0a      	ldr	r3, [pc, #40]	; (803d4 <Set_Duty_Cycle_Synchronous_Channels+0x44>)
   803aa:	fb83 2300 	smull	r2, r3, r3, r0
   803ae:	17c0      	asrs	r0, r0, #31
   803b0:	ebc0 1063 	rsb	r0, r0, r3, asr #5
   803b4:	9001      	str	r0, [sp, #4]
	PWM_sel->PWM_CDTYUPDx &= ~PWM_CDTYUPD_CDTYUPD_Msk;//reset
   803b6:	688b      	ldr	r3, [r1, #8]
   803b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   803bc:	608b      	str	r3, [r1, #8]
	PWM_sel->PWM_CDTYUPDx |= PWM_CDTYUPD_CDTYUPD(t);//set PWM
   803be:	9b01      	ldr	r3, [sp, #4]
   803c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   803c4:	688a      	ldr	r2, [r1, #8]
   803c6:	4313      	orrs	r3, r2
   803c8:	608b      	str	r3, [r1, #8]
   803ca:	b002      	add	sp, #8
   803cc:	4770      	bx	lr
   803ce:	bf00      	nop
   803d0:	40094200 	.word	0x40094200
   803d4:	51eb851f 	.word	0x51eb851f

000803d8 <SPI_transfer>:
 *  Author: hanno
 */ 
#include "SPI_SAM.h"

void SPI_transfer(void)
{
   803d8:	b082      	sub	sp, #8
	volatile uint32_t temp;
	
	temp = (SPI0->SPI_SR>>1)&(0x0001);
   803da:	4b0f      	ldr	r3, [pc, #60]	; (80418 <SPI_transfer+0x40>)
   803dc:	691b      	ldr	r3, [r3, #16]
   803de:	f3c3 0340 	ubfx	r3, r3, #1, #1
   803e2:	9301      	str	r3, [sp, #4]
	if (temp==0)//tests data register is ready
   803e4:	9b01      	ldr	r3, [sp, #4]
   803e6:	b923      	cbnz	r3, 803f2 <SPI_transfer+0x1a>
	{
		temp = (SPI0->SPI_SR>>1)&(0x0001);//Data has been written to SPI_TDR and not yet transferred to the serializer		
   803e8:	4b0b      	ldr	r3, [pc, #44]	; (80418 <SPI_transfer+0x40>)
   803ea:	691b      	ldr	r3, [r3, #16]
   803ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
   803f0:	9301      	str	r3, [sp, #4]
	}
	//set data to be transferred
	SPI0->SPI_TDR |= SPI_TDR_TD(0xA6);
   803f2:	4b09      	ldr	r3, [pc, #36]	; (80418 <SPI_transfer+0x40>)
   803f4:	68da      	ldr	r2, [r3, #12]
   803f6:	f042 02a6 	orr.w	r2, r2, #166	; 0xa6
   803fa:	60da      	str	r2, [r3, #12]
	temp = (SPI0->SPI_SR>>1)&(0x0001);
   803fc:	691b      	ldr	r3, [r3, #16]
   803fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
   80402:	9301      	str	r3, [sp, #4]
	if (temp==0)//tests data register is ready
   80404:	9b01      	ldr	r3, [sp, #4]
   80406:	b923      	cbnz	r3, 80412 <SPI_transfer+0x3a>
	{
			temp = (SPI0->SPI_SR>>1)&(0x0001);//Data has been written to SPI_TDR and not yet transferred to the serializer		
   80408:	4b03      	ldr	r3, [pc, #12]	; (80418 <SPI_transfer+0x40>)
   8040a:	691b      	ldr	r3, [r3, #16]
   8040c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   80410:	9301      	str	r3, [sp, #4]
	}
	
	
   80412:	b002      	add	sp, #8
   80414:	4770      	bx	lr
   80416:	bf00      	nop
   80418:	40008000 	.word	0x40008000

0008041c <main>:
#include "RTC_init_ISL12022M.h"
#include "RTC_ISL.h"
void DELAY(uint32_t delay);

int main(void)
{
   8041c:	b500      	push	{lr}
   8041e:	b083      	sub	sp, #12
	/* Initialize variables */
	struct time_RTC time; 
	volatile uint32_t a = 0;
   80420:	2300      	movs	r3, #0
   80422:	9301      	str	r3, [sp, #4]
    /* Initialize the SAM system */
    SystemInit();
   80424:	4b0e      	ldr	r3, [pc, #56]	; (80460 <main+0x44>)
   80426:	4798      	blx	r3
	SystemCoreClockUpdate();
   80428:	4b0e      	ldr	r3, [pc, #56]	; (80464 <main+0x48>)
   8042a:	4798      	blx	r3

	/* Initialize the peripherals */
	PIO_INIT();//works
   8042c:	4b0e      	ldr	r3, [pc, #56]	; (80468 <main+0x4c>)
   8042e:	4798      	blx	r3
	//TWI_init();
	USART0_init();//works
   80430:	4b0e      	ldr	r3, [pc, #56]	; (8046c <main+0x50>)
   80432:	4798      	blx	r3
	DAC_init();//works
   80434:	4b0e      	ldr	r3, [pc, #56]	; (80470 <main+0x54>)
   80436:	4798      	blx	r3
	ADC_init();//works
   80438:	4b0e      	ldr	r3, [pc, #56]	; (80474 <main+0x58>)
   8043a:	4798      	blx	r3
	PWM_init();//works  
   8043c:	4b0e      	ldr	r3, [pc, #56]	; (80478 <main+0x5c>)
   8043e:	4798      	blx	r3
	SPI_init();//works
   80440:	4b0e      	ldr	r3, [pc, #56]	; (8047c <main+0x60>)
   80442:	4798      	blx	r3
   80444:	e008      	b.n	80458 <main+0x3c>
    while (1)
    {
		a = 0;
		while(a<=500)
		{
		a =a+1;
   80446:	9b01      	ldr	r3, [sp, #4]
   80448:	3301      	adds	r3, #1
   8044a:	9301      	str	r3, [sp, #4]
		while(a<=500)
   8044c:	9b01      	ldr	r3, [sp, #4]
   8044e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   80452:	d9f8      	bls.n	80446 <main+0x2a>
		}
		//Toggle_Output(RED_PB26_PORT,RED_PB27_PIN);
		SPI_transfer();
   80454:	4b0a      	ldr	r3, [pc, #40]	; (80480 <main+0x64>)
   80456:	4798      	blx	r3
		a = 0;
   80458:	2300      	movs	r3, #0
   8045a:	9301      	str	r3, [sp, #4]
		while(a<=500)
   8045c:	e7f6      	b.n	8044c <main+0x30>
   8045e:	bf00      	nop
   80460:	000801d1 	.word	0x000801d1
   80464:	00080275 	.word	0x00080275
   80468:	00080811 	.word	0x00080811
   8046c:	000809a9 	.word	0x000809a9
   80470:	000804c9 	.word	0x000804c9
   80474:	00080485 	.word	0x00080485
   80478:	00080865 	.word	0x00080865
   8047c:	00080939 	.word	0x00080939
   80480:	000803d9 	.word	0x000803d9

00080484 <ADC_init>:
#include "ADC_init_SAM.h"

void ADC_init(void)
{
	//Disable DAC Write Protect Mode Register
	ADC->ADC_WPMR =ADC_WPMR_WPKEY_PASSWD|~(ADC_WPMR_WPEN);
   80484:	4b0e      	ldr	r3, [pc, #56]	; (804c0 <ADC_init+0x3c>)
   80486:	f06f 0201 	mvn.w	r2, #1
   8048a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER1 |= (PMC_PCER1_PID37);//enable clock for ADC
   8048e:	490d      	ldr	r1, [pc, #52]	; (804c4 <ADC_init+0x40>)
   80490:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80494:	f042 0220 	orr.w	r2, r2, #32
   80498:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	// set sampling speed 100us
	ADC -> ADC_MR	&= ~(ADC_MR_PRESCAL_Msk);//reset
   8049c:	685a      	ldr	r2, [r3, #4]
   8049e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   804a2:	605a      	str	r2, [r3, #4]
	ADC -> ADC_MR	|= ADC_MR_PRESCAL(3999);// set
   804a4:	685a      	ldr	r2, [r3, #4]
   804a6:	f442 421f 	orr.w	r2, r2, #40704	; 0x9f00
   804aa:	605a      	str	r2, [r3, #4]
	// enable AD channel 
	ADC -> ADC_CHDR &= ~(0xFF);//reset
   804ac:	695a      	ldr	r2, [r3, #20]
   804ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   804b2:	615a      	str	r2, [r3, #20]
	ADC -> ADC_CHER |= ADC_CHER_CH0;//set AD0
   804b4:	691a      	ldr	r2, [r3, #16]
   804b6:	f042 0201 	orr.w	r2, r2, #1
   804ba:	611a      	str	r2, [r3, #16]
   804bc:	4770      	bx	lr
   804be:	bf00      	nop
   804c0:	400c0000 	.word	0x400c0000
   804c4:	400e0600 	.word	0x400e0600

000804c8 <DAC_init>:
 *  Author: hanno
 */ 
#include "DAC_init_SAM.h"

void DAC_init(void)
{
   804c8:	b082      	sub	sp, #8
	volatile uint32_t temp;
	//Disable DAC Write Protect Mode Register
	DACC->DACC_WPMR =DACC_WPMR_WPKEY(0x444143)|~(DACC_WPMR_WPEN);
   804ca:	4b1d      	ldr	r3, [pc, #116]	; (80540 <DAC_init+0x78>)
   804cc:	f06f 0201 	mvn.w	r2, #1
   804d0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER1 |= (PMC_PCER1_PID38);//enable clock for DAC
   804d4:	491b      	ldr	r1, [pc, #108]	; (80544 <DAC_init+0x7c>)
   804d6:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   804da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   804de:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	/*//Select Channel 1
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;*/
	//set startup time
	DACC->DACC_MR &= ~(DACC_MR_STARTUP_Msk);
   804e2:	685a      	ldr	r2, [r3, #4]
   804e4:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
   804e8:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR |= (DACC_MR_STARTUP_1344);
   804ea:	685a      	ldr	r2, [r3, #4]
   804ec:	f042 52a8 	orr.w	r2, r2, #352321536	; 0x15000000
   804f0:	605a      	str	r2, [r3, #4]
	/*//set refresh period
	DACC->DACC_MR &= ~(DACC_MR_REFRESH_Msk);
	DACC->DACC_MR |= (DACC_MR_REFRESH(0x30));*/
	// Disable channel 0 and enable channel 1
	DACC->DACC_CHDR|= DACC_CHER_CH0;
   804f2:	695a      	ldr	r2, [r3, #20]
   804f4:	f042 0201 	orr.w	r2, r2, #1
   804f8:	615a      	str	r2, [r3, #20]
	DACC->DACC_CHER|= DACC_CHER_CH1;
   804fa:	691a      	ldr	r2, [r3, #16]
   804fc:	f042 0202 	orr.w	r2, r2, #2
   80500:	611a      	str	r2, [r3, #16]
	
	// check if DACC is ready to accept new conversion requests
	temp = (DACC->DACC_ISR>>0)&(0x0001);
   80502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80504:	f003 0301 	and.w	r3, r3, #1
   80508:	9301      	str	r3, [sp, #4]
	if (temp==0)//wait for DAC complete
   8050a:	9b01      	ldr	r3, [sp, #4]
   8050c:	b92b      	cbnz	r3, 8051a <DAC_init+0x52>
	{
		while (1)
		{
			temp = (DACC->DACC_ISR>>0)&(0x0001);//DAC not complete
   8050e:	4b0c      	ldr	r3, [pc, #48]	; (80540 <DAC_init+0x78>)
   80510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80512:	f003 0301 	and.w	r3, r3, #1
   80516:	9301      	str	r3, [sp, #4]
   80518:	e7f9      	b.n	8050e <DAC_init+0x46>
		}
	}
	
	// Set data to be converted
	DACC->DACC_CDR |= 0xFF/2; //Vref/2 
   8051a:	4b09      	ldr	r3, [pc, #36]	; (80540 <DAC_init+0x78>)
   8051c:	6a1a      	ldr	r2, [r3, #32]
   8051e:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
   80522:	621a      	str	r2, [r3, #32]
	
	// check EOC
	temp = (DACC->DACC_ISR>>0)&(0x0001);
   80524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80526:	f003 0301 	and.w	r3, r3, #1
   8052a:	9301      	str	r3, [sp, #4]
	if (temp==0)//wait for DAC complete
   8052c:	9b01      	ldr	r3, [sp, #4]
   8052e:	b92b      	cbnz	r3, 8053c <DAC_init+0x74>
	{
		while (1)
		{
			temp = (DACC->DACC_ISR>>0)&(0x0001);//DAC not complete
   80530:	4b03      	ldr	r3, [pc, #12]	; (80540 <DAC_init+0x78>)
   80532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80534:	f003 0301 	and.w	r3, r3, #1
   80538:	9301      	str	r3, [sp, #4]
   8053a:	e7f9      	b.n	80530 <DAC_init+0x68>
		}
	} 
	
	
   8053c:	b002      	add	sp, #8
   8053e:	4770      	bx	lr
   80540:	400c8000 	.word	0x400c8000
   80544:	400e0600 	.word	0x400e0600

00080548 <PIO_IO_init>:
 */ 

#include "pio_init.h"

void PIO_IO_init(uint8_t IO, Pio *PORT, uint8_t PIN, uint8_t PIO)//initialize pin as Input (1) or Output(0); PIO -> 0=PIO control, 1=A peripheral, 2=B peripheral
{
   80548:	b430      	push	{r4, r5}
   8054a:	b082      	sub	sp, #8
	volatile uint32_t t1;
	// Disables the Write Protect
	PORT ->PIO_WPMR =(PIO_WPMR_WPKEY(0x50494F))|~(PIO_WPMR_WPEN);
   8054c:	f06f 0401 	mvn.w	r4, #1
   80550:	f8c1 40e4 	str.w	r4, [r1, #228]	; 0xe4
	// Grabs PIO Write Protect Status
	t1 =  PORT->PIO_PSR;
   80554:	688c      	ldr	r4, [r1, #8]
   80556:	9401      	str	r4, [sp, #4]
	t1 = (t1>>(PIN))&(0x1);//
   80558:	9c01      	ldr	r4, [sp, #4]
   8055a:	40d4      	lsrs	r4, r2
   8055c:	f004 0401 	and.w	r4, r4, #1
   80560:	9401      	str	r4, [sp, #4]
	t1=(~t1)&(0x1);
   80562:	9c01      	ldr	r4, [sp, #4]
   80564:	f084 0401 	eor.w	r4, r4, #1
   80568:	f004 0401 	and.w	r4, r4, #1
   8056c:	9401      	str	r4, [sp, #4]
	if (t1)//tests if PIO is active
   8056e:	9c01      	ldr	r4, [sp, #4]
   80570:	b104      	cbz	r4, 80574 <PIO_IO_init+0x2c>
   80572:	e7fe      	b.n	80572 <PIO_IO_init+0x2a>
		while (1)
		{
			//fault pins PIO is inactive
		}
	}
	if (PIO==0)
   80574:	b9a3      	cbnz	r3, 805a0 <PIO_IO_init+0x58>
	{
		// Enables the PIO to control
		PORT->PIO_PER |=((0x1u << PIN));//set
   80576:	680c      	ldr	r4, [r1, #0]
   80578:	2501      	movs	r5, #1
   8057a:	4095      	lsls	r5, r2
   8057c:	432c      	orrs	r4, r5
   8057e:	600c      	str	r4, [r1, #0]
		
		// Grabs PIO Controller status for respective pins
		t1 =  PORT->PIO_PSR;
   80580:	688c      	ldr	r4, [r1, #8]
   80582:	9401      	str	r4, [sp, #4]
		t1 = (t1>>(PIN)&(0x1));//
   80584:	9c01      	ldr	r4, [sp, #4]
   80586:	40d4      	lsrs	r4, r2
   80588:	f004 0401 	and.w	r4, r4, #1
   8058c:	9401      	str	r4, [sp, #4]
		t1=(~t1)&(0x1);
   8058e:	9c01      	ldr	r4, [sp, #4]
   80590:	f084 0401 	eor.w	r4, r4, #1
   80594:	f004 0401 	and.w	r4, r4, #1
   80598:	9401      	str	r4, [sp, #4]
		if (t1)//tests if PIO is active
   8059a:	9c01      	ldr	r4, [sp, #4]
   8059c:	b1e4      	cbz	r4, 805d8 <PIO_IO_init+0x90>
   8059e:	e7fe      	b.n	8059e <PIO_IO_init+0x56>
		}
	}
	else
	{
		// Disables the PIO to control
		PORT->PIO_PDR |=((0x1u << PIN));//set
   805a0:	684c      	ldr	r4, [r1, #4]
   805a2:	2501      	movs	r5, #1
   805a4:	4095      	lsls	r5, r2
   805a6:	432c      	orrs	r4, r5
   805a8:	604c      	str	r4, [r1, #4]
		// Grabs PIO Controller status for respective pin
		t1 = (PORT->PIO_PSR>>(PIN)&(0x1));//
   805aa:	688c      	ldr	r4, [r1, #8]
   805ac:	40d4      	lsrs	r4, r2
   805ae:	f004 0401 	and.w	r4, r4, #1
   805b2:	9401      	str	r4, [sp, #4]
		if (t1)//tests if PIO is active
   805b4:	9c01      	ldr	r4, [sp, #4]
   805b6:	b104      	cbz	r4, 805ba <PIO_IO_init+0x72>
   805b8:	e7fe      	b.n	805b8 <PIO_IO_init+0x70>
			{
				//fault pins PIO is inactive
			}
		}
		
		if (PIO == 1)//PIO Peripheral AB
   805ba:	2b01      	cmp	r3, #1
   805bc:	d105      	bne.n	805ca <PIO_IO_init+0x82>
		{
			PORT->PIO_ABSR&=(~0x1)<<PIN;//set peripheral to A
   805be:	6f0c      	ldr	r4, [r1, #112]	; 0x70
   805c0:	f06f 0501 	mvn.w	r5, #1
   805c4:	4095      	lsls	r5, r2
   805c6:	402c      	ands	r4, r5
   805c8:	670c      	str	r4, [r1, #112]	; 0x70
		}
		if (PIO == 2)
   805ca:	2b02      	cmp	r3, #2
   805cc:	d104      	bne.n	805d8 <PIO_IO_init+0x90>
		{
			PORT->PIO_ABSR|=(0x1)<<PIN;//set peripheral to B
   805ce:	6f0c      	ldr	r4, [r1, #112]	; 0x70
   805d0:	2501      	movs	r5, #1
   805d2:	4095      	lsls	r5, r2
   805d4:	432c      	orrs	r4, r5
   805d6:	670c      	str	r4, [r1, #112]	; 0x70
		}
	}
	
	
	if (IO)
   805d8:	b160      	cbz	r0, 805f4 <PIO_IO_init+0xac>
	{	// Disable the output line
		PORT->PIO_ODR |=(0x1u << PIN);//set
   805da:	694c      	ldr	r4, [r1, #20]
   805dc:	2501      	movs	r5, #1
   805de:	4095      	lsls	r5, r2
   805e0:	432c      	orrs	r4, r5
   805e2:	614c      	str	r4, [r1, #20]
		// Grabs PIO Controller Output Status for respective pins
		t1 = (PORT->PIO_OSR>>PIN)&(0x1);
   805e4:	698c      	ldr	r4, [r1, #24]
   805e6:	40d4      	lsrs	r4, r2
   805e8:	f004 0401 	and.w	r4, r4, #1
   805ec:	9401      	str	r4, [sp, #4]
		if (t1)//tests if I/O is set correctly
   805ee:	9c01      	ldr	r4, [sp, #4]
   805f0:	b18c      	cbz	r4, 80616 <PIO_IO_init+0xce>
   805f2:	e7fe      	b.n	805f2 <PIO_IO_init+0xaa>
			}
		}	
	} 
	else
	{	//Enable the output line
		PORT->PIO_OER |=((0x1u << PIN));//set
   805f4:	690c      	ldr	r4, [r1, #16]
   805f6:	2501      	movs	r5, #1
   805f8:	4095      	lsls	r5, r2
   805fa:	432c      	orrs	r4, r5
   805fc:	610c      	str	r4, [r1, #16]
		// Grabs PIO Controller Output Status for respective pins
		t1 = (PORT->PIO_OSR>>PIN);//
   805fe:	698c      	ldr	r4, [r1, #24]
   80600:	40d4      	lsrs	r4, r2
   80602:	9401      	str	r4, [sp, #4]
		t1=(~(t1&(0x1)))&(0x1);
   80604:	9c01      	ldr	r4, [sp, #4]
   80606:	f084 0401 	eor.w	r4, r4, #1
   8060a:	f004 0401 	and.w	r4, r4, #1
   8060e:	9401      	str	r4, [sp, #4]
		if (t1)//tests if I/O is set correctly
   80610:	9c01      	ldr	r4, [sp, #4]
   80612:	b104      	cbz	r4, 80616 <PIO_IO_init+0xce>
   80614:	e7fe      	b.n	80614 <PIO_IO_init+0xcc>
	}
	
	
	
	// Grabs PIO Controller Input Filter Status for respective pins
	t1 = (PORT->PIO_IFER>>(PIN)&(0x0001));
   80616:	6a0c      	ldr	r4, [r1, #32]
   80618:	40d4      	lsrs	r4, r2
   8061a:	f004 0401 	and.w	r4, r4, #1
   8061e:	9401      	str	r4, [sp, #4]
	if (t1)//test if input glitch filter is disabled on the I/O line 
   80620:	9c01      	ldr	r4, [sp, #4]
   80622:	b104      	cbz	r4, 80626 <PIO_IO_init+0xde>
   80624:	e7fe      	b.n	80624 <PIO_IO_init+0xdc>
		{
			//fault input glitch filter is enabled on the I/O line
		}
	}
	
	if ((~IO)&(0x1)&(PIO==0))
   80626:	f080 0001 	eor.w	r0, r0, #1
   8062a:	2b00      	cmp	r3, #0
   8062c:	bf14      	ite	ne
   8062e:	2300      	movne	r3, #0
   80630:	f000 0301 	andeq.w	r3, r0, #1
   80634:	b1a3      	cbz	r3, 80660 <PIO_IO_init+0x118>
	{
		// Enables Output Write Enable Register
		PORT->PIO_OWER |=((0x1u << PIN));//set
   80636:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
   8063a:	2401      	movs	r4, #1
   8063c:	4094      	lsls	r4, r2
   8063e:	4320      	orrs	r0, r4
   80640:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0

		// GrabsPIO Output Write Status Register for respective pins
		t1 = (PORT->PIO_OWSR>>(PIN))&(0x1);
   80644:	f8d1 10a8 	ldr.w	r1, [r1, #168]	; 0xa8
   80648:	fa21 f202 	lsr.w	r2, r1, r2
   8064c:	f002 0201 	and.w	r2, r2, #1
   80650:	9201      	str	r2, [sp, #4]
		if ((~t1)&(0x1))// Writing PIO_ODSR affects the I/O line. 
   80652:	9a01      	ldr	r2, [sp, #4]
   80654:	f012 0f01 	tst.w	r2, #1
   80658:	d000      	beq.n	8065c <PIO_IO_init+0x114>
   8065a:	2300      	movs	r3, #0
   8065c:	b103      	cbz	r3, 80660 <PIO_IO_init+0x118>
   8065e:	e7fe      	b.n	8065e <PIO_IO_init+0x116>
				//fault Writing PIO_ODSR does not affect the I/O line 
			}
		}
	}	
	
}
   80660:	b002      	add	sp, #8
   80662:	bc30      	pop	{r4, r5}
   80664:	4770      	bx	lr
	...

00080668 <LED_PIO_init>:

void LED_PIO_init(void)
{
   80668:	b510      	push	{r4, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   8066a:	4b0c      	ldr	r3, [pc, #48]	; (8069c <LED_PIO_init+0x34>)
   8066c:	f06f 0201 	mvn.w	r2, #1
   80670:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID11);//enable clock for port A
   80674:	691a      	ldr	r2, [r3, #16]
   80676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8067a:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (PMC_PCER0_PID12);//enable clock for port B
   8067c:	691a      	ldr	r2, [r3, #16]
   8067e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   80682:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,RED_PB26_PORT,RED_PB27_PIN,PIO_control);
   80684:	2300      	movs	r3, #0
   80686:	221b      	movs	r2, #27
   80688:	4905      	ldr	r1, [pc, #20]	; (806a0 <LED_PIO_init+0x38>)
   8068a:	4618      	mov	r0, r3
   8068c:	4c05      	ldr	r4, [pc, #20]	; (806a4 <LED_PIO_init+0x3c>)
   8068e:	47a0      	blx	r4
	PIO_IO_init(Input,GREEN_PA15_PORT,GREEN_PA15_PIN,PIO_control);
   80690:	2300      	movs	r3, #0
   80692:	220f      	movs	r2, #15
   80694:	4904      	ldr	r1, [pc, #16]	; (806a8 <LED_PIO_init+0x40>)
   80696:	2001      	movs	r0, #1
   80698:	47a0      	blx	r4
   8069a:	bd10      	pop	{r4, pc}
   8069c:	400e0600 	.word	0x400e0600
   806a0:	400e1000 	.word	0x400e1000
   806a4:	00080549 	.word	0x00080549
   806a8:	400e0e00 	.word	0x400e0e00

000806ac <USART_PIO_init>:
	
}

void USART_PIO_init(void)
{
   806ac:	b538      	push	{r3, r4, r5, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   806ae:	4b0b      	ldr	r3, [pc, #44]	; (806dc <USART_PIO_init+0x30>)
   806b0:	f06f 0201 	mvn.w	r2, #1
   806b4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID17);//enable clock for USART0
   806b8:	691a      	ldr	r2, [r3, #16]
   806ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   806be:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,TXD0_PA11_PORT,TXD0_PA11_PIN,Peripheral_A);
   806c0:	4d07      	ldr	r5, [pc, #28]	; (806e0 <USART_PIO_init+0x34>)
   806c2:	2301      	movs	r3, #1
   806c4:	220b      	movs	r2, #11
   806c6:	4629      	mov	r1, r5
   806c8:	2000      	movs	r0, #0
   806ca:	4c06      	ldr	r4, [pc, #24]	; (806e4 <USART_PIO_init+0x38>)
   806cc:	47a0      	blx	r4
	PIO_IO_init(Input,RDX0_PA10_PORT,RDX0_PA10_PIN,Peripheral_A);
   806ce:	2301      	movs	r3, #1
   806d0:	220a      	movs	r2, #10
   806d2:	4629      	mov	r1, r5
   806d4:	4618      	mov	r0, r3
   806d6:	47a0      	blx	r4
   806d8:	bd38      	pop	{r3, r4, r5, pc}
   806da:	bf00      	nop
   806dc:	400e0600 	.word	0x400e0600
   806e0:	400e0e00 	.word	0x400e0e00
   806e4:	00080549 	.word	0x00080549

000806e8 <TWI0_PIO_init>:
	
}

void TWI0_PIO_init(void)
{
   806e8:	b538      	push	{r3, r4, r5, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   806ea:	4b0b      	ldr	r3, [pc, #44]	; (80718 <TWI0_PIO_init+0x30>)
   806ec:	f06f 0201 	mvn.w	r2, #1
   806f0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID22);//enable clock for TWI0
   806f4:	691a      	ldr	r2, [r3, #16]
   806f6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   806fa:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,TWD0_SCL_PA18_PORT,TWD0_SCL_PA18_PIN,Peripheral_A);
   806fc:	4d07      	ldr	r5, [pc, #28]	; (8071c <TWI0_PIO_init+0x34>)
   806fe:	2301      	movs	r3, #1
   80700:	2212      	movs	r2, #18
   80702:	4629      	mov	r1, r5
   80704:	2000      	movs	r0, #0
   80706:	4c06      	ldr	r4, [pc, #24]	; (80720 <TWI0_PIO_init+0x38>)
   80708:	47a0      	blx	r4
	PIO_IO_init(Output,TWD0_SDA_PA17_PORT,TWD0_SDA_PA17_PIN,Peripheral_A);
   8070a:	2301      	movs	r3, #1
   8070c:	2211      	movs	r2, #17
   8070e:	4629      	mov	r1, r5
   80710:	2000      	movs	r0, #0
   80712:	47a0      	blx	r4
   80714:	bd38      	pop	{r3, r4, r5, pc}
   80716:	bf00      	nop
   80718:	400e0600 	.word	0x400e0600
   8071c:	400e0e00 	.word	0x400e0e00
   80720:	00080549 	.word	0x00080549

00080724 <PWM_PIO_init>:

	
}

void PWM_PIO_init(void)
{
   80724:	b538      	push	{r3, r4, r5, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   80726:	4b0d      	ldr	r3, [pc, #52]	; (8075c <PWM_PIO_init+0x38>)
   80728:	f06f 0201 	mvn.w	r2, #1
   8072c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER1_PID36);//enable clock for PWM
   80730:	691a      	ldr	r2, [r3, #16]
   80732:	f042 0210 	orr.w	r2, r2, #16
   80736:	611a      	str	r2, [r3, #16]
	
	
	PIO_IO_init(Output,PWMH3_PB15_PORT,PWMH3_PB15_PIN,Peripheral_B);
   80738:	2302      	movs	r3, #2
   8073a:	220f      	movs	r2, #15
   8073c:	4908      	ldr	r1, [pc, #32]	; (80760 <PWM_PIO_init+0x3c>)
   8073e:	2000      	movs	r0, #0
   80740:	4c08      	ldr	r4, [pc, #32]	; (80764 <PWM_PIO_init+0x40>)
   80742:	47a0      	blx	r4
	PIO_IO_init(Output,PWML3_PA0_PORT,PWML3_PA0_PIN,Peripheral_B);
   80744:	4d08      	ldr	r5, [pc, #32]	; (80768 <PWM_PIO_init+0x44>)
   80746:	2302      	movs	r3, #2
   80748:	2200      	movs	r2, #0
   8074a:	4629      	mov	r1, r5
   8074c:	4610      	mov	r0, r2
   8074e:	47a0      	blx	r4
	//PIO_IO_init(Output,PWMH0_PB12_PORT,PWMH0_PB12_PIN,Peripheral_B);
	PIO_IO_init(Input,PWMFI1_PA3_PORT,PWMFI1_PA3_PIN,Peripheral_B);
   80750:	2302      	movs	r3, #2
   80752:	2205      	movs	r2, #5
   80754:	4629      	mov	r1, r5
   80756:	2001      	movs	r0, #1
   80758:	47a0      	blx	r4
   8075a:	bd38      	pop	{r3, r4, r5, pc}
   8075c:	400e0600 	.word	0x400e0600
   80760:	400e1000 	.word	0x400e1000
   80764:	00080549 	.word	0x00080549
   80768:	400e0e00 	.word	0x400e0e00

0008076c <SPI_PIO_init>:
	
}

void SPI_PIO_init(void)
{
   8076c:	b538      	push	{r3, r4, r5, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   8076e:	4b0d      	ldr	r3, [pc, #52]	; (807a4 <SPI_PIO_init+0x38>)
   80770:	f06f 0201 	mvn.w	r2, #1
   80774:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID24);//enable clock for SPI0
   80778:	691a      	ldr	r2, [r3, #16]
   8077a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   8077e:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,SPI0_SPCK_PA27_PORT,SPI0_SPCK_PA27_PIN,Peripheral_A);
   80780:	4d09      	ldr	r5, [pc, #36]	; (807a8 <SPI_PIO_init+0x3c>)
   80782:	2301      	movs	r3, #1
   80784:	221b      	movs	r2, #27
   80786:	4629      	mov	r1, r5
   80788:	2000      	movs	r0, #0
   8078a:	4c08      	ldr	r4, [pc, #32]	; (807ac <SPI_PIO_init+0x40>)
   8078c:	47a0      	blx	r4
	PIO_IO_init(Output,SPI0_MOSI_PA26_PORT,SPI0_MOSI_PA26_PIN,Peripheral_A);
   8078e:	2301      	movs	r3, #1
   80790:	221a      	movs	r2, #26
   80792:	4629      	mov	r1, r5
   80794:	2000      	movs	r0, #0
   80796:	47a0      	blx	r4
	PIO_IO_init(Input,SPI0_MISO_PA25_PORT,SPI0_MISO_PA25_PIN,Peripheral_A);
   80798:	2301      	movs	r3, #1
   8079a:	2219      	movs	r2, #25
   8079c:	4629      	mov	r1, r5
   8079e:	4618      	mov	r0, r3
   807a0:	47a0      	blx	r4
   807a2:	bd38      	pop	{r3, r4, r5, pc}
   807a4:	400e0600 	.word	0x400e0600
   807a8:	400e0e00 	.word	0x400e0e00
   807ac:	00080549 	.word	0x00080549

000807b0 <ADC_PIO_init>:
	
}


void ADC_PIO_init(void)
{
   807b0:	b510      	push	{r4, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   807b2:	4b08      	ldr	r3, [pc, #32]	; (807d4 <ADC_PIO_init+0x24>)
   807b4:	f06f 0201 	mvn.w	r2, #1
   807b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER1_PID37);//enable clock for SPI0
   807bc:	691a      	ldr	r2, [r3, #16]
   807be:	f042 0220 	orr.w	r2, r2, #32
   807c2:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Input,REF1V65_AD0_PA2_PORT,REF1V65_AD0_PA2_PIN,Alternate_function);
   807c4:	2303      	movs	r3, #3
   807c6:	2202      	movs	r2, #2
   807c8:	4903      	ldr	r1, [pc, #12]	; (807d8 <ADC_PIO_init+0x28>)
   807ca:	2001      	movs	r0, #1
   807cc:	4c03      	ldr	r4, [pc, #12]	; (807dc <ADC_PIO_init+0x2c>)
   807ce:	47a0      	blx	r4
   807d0:	bd10      	pop	{r4, pc}
   807d2:	bf00      	nop
   807d4:	400e0600 	.word	0x400e0600
   807d8:	400e0e00 	.word	0x400e0e00
   807dc:	00080549 	.word	0x00080549

000807e0 <DAC_PIO_init>:
}

void DAC_PIO_init(void)
{
   807e0:	b510      	push	{r4, lr}
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   807e2:	4b08      	ldr	r3, [pc, #32]	; (80804 <DAC_PIO_init+0x24>)
   807e4:	f06f 0201 	mvn.w	r2, #1
   807e8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER1_PID38);//enable clock for SPI0
   807ec:	691a      	ldr	r2, [r3, #16]
   807ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   807f2:	611a      	str	r2, [r3, #16]
	
	PIO_IO_init(Output,DAC1_PB16_PORT,DAC1_PB16_PIN,Alternate_function);
   807f4:	2303      	movs	r3, #3
   807f6:	2210      	movs	r2, #16
   807f8:	4903      	ldr	r1, [pc, #12]	; (80808 <DAC_PIO_init+0x28>)
   807fa:	2000      	movs	r0, #0
   807fc:	4c03      	ldr	r4, [pc, #12]	; (8080c <DAC_PIO_init+0x2c>)
   807fe:	47a0      	blx	r4
   80800:	bd10      	pop	{r4, pc}
   80802:	bf00      	nop
   80804:	400e0600 	.word	0x400e0600
   80808:	400e1000 	.word	0x400e1000
   8080c:	00080549 	.word	0x00080549

00080810 <PIO_INIT>:
	
}


void PIO_INIT(void)
{
   80810:	b508      	push	{r3, lr}
	LED_PIO_init();
   80812:	4b07      	ldr	r3, [pc, #28]	; (80830 <PIO_INIT+0x20>)
   80814:	4798      	blx	r3
	USART_PIO_init();
   80816:	4b07      	ldr	r3, [pc, #28]	; (80834 <PIO_INIT+0x24>)
   80818:	4798      	blx	r3
	TWI0_PIO_init();
   8081a:	4b07      	ldr	r3, [pc, #28]	; (80838 <PIO_INIT+0x28>)
   8081c:	4798      	blx	r3
	SPI_PIO_init();
   8081e:	4b07      	ldr	r3, [pc, #28]	; (8083c <PIO_INIT+0x2c>)
   80820:	4798      	blx	r3
	ADC_PIO_init();
   80822:	4b07      	ldr	r3, [pc, #28]	; (80840 <PIO_INIT+0x30>)
   80824:	4798      	blx	r3
	DAC_PIO_init();
   80826:	4b07      	ldr	r3, [pc, #28]	; (80844 <PIO_INIT+0x34>)
   80828:	4798      	blx	r3
	PWM_PIO_init();
   8082a:	4b07      	ldr	r3, [pc, #28]	; (80848 <PIO_INIT+0x38>)
   8082c:	4798      	blx	r3
   8082e:	bd08      	pop	{r3, pc}
   80830:	00080669 	.word	0x00080669
   80834:	000806ad 	.word	0x000806ad
   80838:	000806e9 	.word	0x000806e9
   8083c:	0008076d 	.word	0x0008076d
   80840:	000807b1 	.word	0x000807b1
   80844:	000807e1 	.word	0x000807e1
   80848:	00080725 	.word	0x00080725

0008084c <PWM_init_FAULT>:
	
	}

void PWM_init_FAULT(void)
{
	PWM->PWM_FMR &= ~PWM_FMR_FPOL(0b1<<1);
   8084c:	4b04      	ldr	r3, [pc, #16]	; (80860 <PWM_init_FAULT+0x14>)
   8084e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   80850:	f022 0202 	bic.w	r2, r2, #2
   80854:	65da      	str	r2, [r3, #92]	; 0x5c
	//PWM->PWM_FPE1 |= PWM_FPE1_FPE3(0b1<<1);//enable fault protection for channel 3
	PWM->PWM_FPE1 |= PWM_FPE1_FPE0(0b1<<1);//enable fault protection for channel 0
   80856:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   80858:	f042 0202 	orr.w	r2, r2, #2
   8085c:	66da      	str	r2, [r3, #108]	; 0x6c
   8085e:	4770      	bx	lr
   80860:	40094000 	.word	0x40094000

00080864 <PWM_init>:
	//update synchronous channels
	//PWM ->PWM_SCUC |=PWM_SCUC_UPDULOCK;
}
	
void PWM_init(void)//synchronous mode
{
   80864:	b570      	push	{r4, r5, r6, lr}
	//select and divide PWM clock A and B.PWM_SCUC UPDULOCK
	//PWM ->PWM_CLK = PWM_CLK_DIVA(4)|PWM_CLK_DIVB(4)|PWM_CLK_PREA(0b1010)|PWM_CLK_PREB(0b1010); //0b1010 -> MCK/1024
	
	//Disable PMC Write Protect Mode Register
	PMC->PMC_WPMR =PMC_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   80866:	4b2e      	ldr	r3, [pc, #184]	; (80920 <PWM_init+0xbc>)
   80868:	f06f 0201 	mvn.w	r2, #1
   8086c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//Enable Peripheral Clock
	PMC->PMC_PCER1 |= (PMC_PCER1_PID36);//enable clock for PWM
   80870:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   80874:	f042 0210 	orr.w	r2, r2, #16
   80878:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	// select mode
	PWM ->PWM_SCM &= ~PWM_SCM_UPDM_Msk;
   8087c:	4c29      	ldr	r4, [pc, #164]	; (80924 <PWM_init+0xc0>)
   8087e:	6a23      	ldr	r3, [r4, #32]
   80880:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   80884:	6223      	str	r3, [r4, #32]
	PWM ->PWM_SCM |= PWM_SCM_UPDM_MODE0;
   80886:	6a23      	ldr	r3, [r4, #32]
   80888:	6223      	str	r3, [r4, #32]
	//set channels as synchronous channels
	PWM->PWM_SCM |= PWM_SCM_SYNC1;
   8088a:	6a23      	ldr	r3, [r4, #32]
   8088c:	f043 0302 	orr.w	r3, r3, #2
   80890:	6223      	str	r3, [r4, #32]
	PWM->PWM_SCM |= PWM_SCM_SYNC2;
   80892:	6a23      	ldr	r3, [r4, #32]
   80894:	f043 0304 	orr.w	r3, r3, #4
   80898:	6223      	str	r3, [r4, #32]
	PWM->PWM_SCM |= PWM_SCM_SYNC3;
   8089a:	6a23      	ldr	r3, [r4, #32]
   8089c:	f043 0308 	orr.w	r3, r3, #8
   808a0:	6223      	str	r3, [r4, #32]
	
	//Enable channel 0
	PWM->PWM_ENA |= PWM_ENA_CHID0;
   808a2:	6863      	ldr	r3, [r4, #4]
   808a4:	f043 0301 	orr.w	r3, r3, #1
   808a8:	6063      	str	r3, [r4, #4]
	//Enable channel 1
	PWM->PWM_ENA |= PWM_ENA_CHID1;
   808aa:	6863      	ldr	r3, [r4, #4]
   808ac:	f043 0302 	orr.w	r3, r3, #2
   808b0:	6063      	str	r3, [r4, #4]
	//Enable channel 2
	PWM->PWM_ENA |= PWM_ENA_CHID2;
   808b2:	6863      	ldr	r3, [r4, #4]
   808b4:	f043 0304 	orr.w	r3, r3, #4
   808b8:	6063      	str	r3, [r4, #4]
	//Enable channel 3
	PWM->PWM_ENA |= PWM_ENA_CHID3;
   808ba:	6863      	ldr	r3, [r4, #4]
   808bc:	f043 0308 	orr.w	r3, r3, #8
   808c0:	6063      	str	r3, [r4, #4]
	//set frequency of PWM channel
	/*
	(MCK_DIV_16)16*(PWM_CPRDUPD_CPRDUPD)0x1f4/(MCK)80e6 =10kHz 
	*/
	//PWM Channel Period Update Register
	PWM0->PWM_CPRDUPDx |= PWM_CPRDUPD_CPRDUPD(0x1f4);//*(uint32_t *)0x40094270
   808c2:	4919      	ldr	r1, [pc, #100]	; (80928 <PWM_init+0xc4>)
   808c4:	690b      	ldr	r3, [r1, #16]
   808c6:	f443 73fa 	orr.w	r3, r3, #500	; 0x1f4
   808ca:	610b      	str	r3, [r1, #16]
	//PWM Channel Prescaler
	PWM0->PWM_CMRx  &= ~PWM_CMR_CPRE_Msk;//*(uint32_t *)0x40094260
   808cc:	680b      	ldr	r3, [r1, #0]
   808ce:	f023 030f 	bic.w	r3, r3, #15
   808d2:	600b      	str	r3, [r1, #0]
	PWM0->PWM_CMRx |= PWM_CMR_CPRE_MCK_DIV_16;
   808d4:	680b      	ldr	r3, [r1, #0]
   808d6:	f043 0304 	orr.w	r3, r3, #4
   808da:	600b      	str	r3, [r1, #0]
	
	//Channel Alignment
	PWM0->PWM_CMRx |= PWM_CMR_CALG;
   808dc:	680b      	ldr	r3, [r1, #0]
   808de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   808e2:	600b      	str	r3, [r1, #0]
	// Universal Sync settings stop-------------------------------------------
	
	//PWM Channel Dead Time Update Register CPRD-CDTY
	PWM3->PWM_DTUPDx= PWM_DTUPD_DTHUPD(0xF)|PWM_DTUPD_DTLUPD(0xF);//*(uint32_t *)0x4009427C
   808e4:	4d11      	ldr	r5, [pc, #68]	; (8092c <PWM_init+0xc8>)
   808e6:	f04f 120f 	mov.w	r2, #983055	; 0xf000f
   808ea:	61ea      	str	r2, [r5, #28]
	// Dead Time Generator Enable
	PWM3->PWM_CMRx |= PWM_CMR_DTE; //*(uint32_t *)0x40094260
   808ec:	682b      	ldr	r3, [r5, #0]
   808ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808f2:	602b      	str	r3, [r5, #0]
	//Invert Low signal
	//PWM3->PWM_CMRx |= PWM_CMR_DTLI;

	//PWM Channel Dead Time Update Register CPRD-CDTY
	PWM0->PWM_DTUPDx= PWM_DTUPD_DTHUPD(0xF)|PWM_DTUPD_DTLUPD(0xF);//*(uint32_t *)0x4009427C
   808f4:	61ca      	str	r2, [r1, #28]
	// Dead Time Generator Enable
	PWM0->PWM_CMRx |= PWM_CMR_DTE; //*(uint32_t *)0x40094260
   808f6:	680b      	ldr	r3, [r1, #0]
   808f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808fc:	600b      	str	r3, [r1, #0]
	
	//update synchronous channels
	PWM ->PWM_SCUC |=PWM_SCUC_UPDULOCK;
   808fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80900:	f043 0301 	orr.w	r3, r3, #1
   80904:	62a3      	str	r3, [r4, #40]	; 0x28
	
	Set_Duty_Cycle_Synchronous_Channels(10,PWM0);
   80906:	200a      	movs	r0, #10
   80908:	4e09      	ldr	r6, [pc, #36]	; (80930 <PWM_init+0xcc>)
   8090a:	47b0      	blx	r6
	Set_Duty_Cycle_Synchronous_Channels(10,PWM3);
   8090c:	4629      	mov	r1, r5
   8090e:	200a      	movs	r0, #10
   80910:	47b0      	blx	r6
	//update synchronous channels
	PWM ->PWM_SCUC |=PWM_SCUC_UPDULOCK;
   80912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80914:	f043 0301 	orr.w	r3, r3, #1
   80918:	62a3      	str	r3, [r4, #40]	; 0x28
	PWM_init_FAULT();
   8091a:	4b06      	ldr	r3, [pc, #24]	; (80934 <PWM_init+0xd0>)
   8091c:	4798      	blx	r3
   8091e:	bd70      	pop	{r4, r5, r6, pc}
   80920:	400e0600 	.word	0x400e0600
   80924:	40094000 	.word	0x40094000
   80928:	40094200 	.word	0x40094200
   8092c:	40094260 	.word	0x40094260
   80930:	00080391 	.word	0x00080391
   80934:	0008084d 	.word	0x0008084d

00080938 <SPI_init>:
#include "SPI_init_SAM.h"

void SPI_init(void)
{
	//Enable Peripheral Clock
	PMC->PMC_PCER0 |= (PMC_PCER0_PID24);//enable clock for SPI0
   80938:	4a19      	ldr	r2, [pc, #100]	; (809a0 <SPI_init+0x68>)
   8093a:	6913      	ldr	r3, [r2, #16]
   8093c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   80940:	6113      	str	r3, [r2, #16]
	//Enable Peripheral SPI0
	SPI0->SPI_CR |= SPI_CR_SPIEN;
   80942:	4b18      	ldr	r3, [pc, #96]	; (809a4 <SPI_init+0x6c>)
   80944:	681a      	ldr	r2, [r3, #0]
   80946:	f042 0201 	orr.w	r2, r2, #1
   8094a:	601a      	str	r2, [r3, #0]
	//SCBR: Serial Clock Baud Rate
	SPI0->SPI_CSR[1] &= ~(SPI_CSR_SCBR_Msk);
   8094c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8094e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   80952:	635a      	str	r2, [r3, #52]	; 0x34
	SPI0->SPI_CSR[1] |= SPI_CSR_SCBR(16);
   80954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8095a:	635a      	str	r2, [r3, #52]	; 0x34
	//SPI is in Master mode
	SPI0->SPI_MR |= SPI_MR_MSTR;
   8095c:	685a      	ldr	r2, [r3, #4]
   8095e:	f042 0201 	orr.w	r2, r2, #1
   80962:	605a      	str	r2, [r3, #4]
	//The Peripheral Chip Select does not rise after the last transfer is achieved
	//It remains active until a new transfer is requested on a different chip select.
	SPI0->SPI_CSR[1] |= SPI_CSR_CSAAT;
   80964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80966:	f042 0208 	orr.w	r2, r2, #8
   8096a:	635a      	str	r2, [r3, #52]	; 0x34
	//Fixed Peripheral Select.
	SPI0->SPI_MR &= ~SPI_MR_PS;
   8096c:	685a      	ldr	r2, [r3, #4]
   8096e:	f022 0202 	bic.w	r2, r2, #2
   80972:	605a      	str	r2, [r3, #4]
	//Delay Between Chip Selects
	SPI0->SPI_MR |= SPI_MR_PCS_Msk;//reset
   80974:	685a      	ldr	r2, [r3, #4]
   80976:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
   8097a:	605a      	str	r2, [r3, #4]
	SPI0->SPI_MR &= ~SPI_MR_DLYBCS_Msk;//reset
   8097c:	685a      	ldr	r2, [r3, #4]
   8097e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   80982:	605a      	str	r2, [r3, #4]
	SPI0->SPI_MR |= SPI_MR_DLYBCS(6);//set delay
   80984:	685a      	ldr	r2, [r3, #4]
   80986:	f042 62c0 	orr.w	r2, r2, #100663296	; 0x6000000
   8098a:	605a      	str	r2, [r3, #4]
	//Peripheral Chip Select
	SPI0->SPI_MR &= ~SPI_MR_PCS_Msk;//reset
   8098c:	685a      	ldr	r2, [r3, #4]
   8098e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80992:	605a      	str	r2, [r3, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(0b1101);//select
   80994:	685a      	ldr	r2, [r3, #4]
   80996:	f442 2250 	orr.w	r2, r2, #851968	; 0xd0000
   8099a:	605a      	str	r2, [r3, #4]
   8099c:	4770      	bx	lr
   8099e:	bf00      	nop
   809a0:	400e0600 	.word	0x400e0600
   809a4:	40008000 	.word	0x40008000

000809a8 <USART0_init>:
 */ 

#include "USART_init_SAM.h"

void USART0_init(void)//w
{
   809a8:	b082      	sub	sp, #8
	volatile uint32_t t1;
	//clear write protect
	USART0->US_WPMR =US_WPMR_WPKEY_PASSWD|~(PMC_WPMR_WPEN);
   809aa:	4b26      	ldr	r3, [pc, #152]	; (80a44 <USART0_init+0x9c>)
   809ac:	f06f 0201 	mvn.w	r2, #1
   809b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//select MCK as clock
	USART0->US_MR &= ~(US_MR_USCLKS_Msk);//reset
   809b4:	685a      	ldr	r2, [r3, #4]
   809b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
   809ba:	605a      	str	r2, [r3, #4]
	USART0->US_MR |= (US_MR_USCLKS_MCK);//set
   809bc:	685a      	ldr	r2, [r3, #4]
   809be:	605a      	str	r2, [r3, #4]
	//set usart to normal mode
	USART0->US_MR &=~(US_MR_USART_MODE_Msk);
   809c0:	685a      	ldr	r2, [r3, #4]
   809c2:	f022 020f 	bic.w	r2, r2, #15
   809c6:	605a      	str	r2, [r3, #4]
	USART0->US_MR |=US_MR_USART_MODE_NORMAL;
   809c8:	685a      	ldr	r2, [r3, #4]
   809ca:	605a      	str	r2, [r3, #4]
	//set character length to 8 bits
	USART0->US_MR &=~(US_MR_CHRL_Msk);
   809cc:	685a      	ldr	r2, [r3, #4]
   809ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   809d2:	605a      	str	r2, [r3, #4]
	USART0->US_MR |=US_MR_CHRL_8_BIT;
   809d4:	685a      	ldr	r2, [r3, #4]
   809d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
   809da:	605a      	str	r2, [r3, #4]
	//set parity type to no parity
	USART0->US_MR &=~(US_MR_PAR_Msk);
   809dc:	685a      	ldr	r2, [r3, #4]
   809de:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
   809e2:	605a      	str	r2, [r3, #4]
	USART0->US_MR |=US_MR_PAR_NO;
   809e4:	685a      	ldr	r2, [r3, #4]
   809e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   809ea:	605a      	str	r2, [r3, #4]
	//set baud rate
	USART0->US_BRGR &=~(US_BRGR_CD_Msk);
   809ec:	6a1a      	ldr	r2, [r3, #32]
   809ee:	0c12      	lsrs	r2, r2, #16
   809f0:	0412      	lsls	r2, r2, #16
   809f2:	621a      	str	r2, [r3, #32]
	USART0->US_BRGR |=0x2B;//115200
   809f4:	6a1a      	ldr	r2, [r3, #32]
   809f6:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
   809fa:	621a      	str	r2, [r3, #32]
	t1= USART0->US_BRGR ;
   809fc:	6a1a      	ldr	r2, [r3, #32]
   809fe:	9201      	str	r2, [sp, #4]
	//enable transmit and receive
	USART0->US_CR |=US_CR_RSTRX;//reset receive
   80a00:	681a      	ldr	r2, [r3, #0]
   80a02:	f042 0204 	orr.w	r2, r2, #4
   80a06:	601a      	str	r2, [r3, #0]
	USART0->US_CR &=~US_CR_RSTRX;
   80a08:	681a      	ldr	r2, [r3, #0]
   80a0a:	f022 0204 	bic.w	r2, r2, #4
   80a0e:	601a      	str	r2, [r3, #0]
	USART0->US_CR &=~US_CR_RXDIS;//reset disable
   80a10:	681a      	ldr	r2, [r3, #0]
   80a12:	f022 0220 	bic.w	r2, r2, #32
   80a16:	601a      	str	r2, [r3, #0]
	USART0->US_CR |=US_CR_RXEN;//enable receive
   80a18:	681a      	ldr	r2, [r3, #0]
   80a1a:	f042 0210 	orr.w	r2, r2, #16
   80a1e:	601a      	str	r2, [r3, #0]
	USART0->US_CR |=US_CR_RSTTX;//reset transmit
   80a20:	681a      	ldr	r2, [r3, #0]
   80a22:	f042 0208 	orr.w	r2, r2, #8
   80a26:	601a      	str	r2, [r3, #0]
	USART0->US_CR &=~US_CR_RSTTX;
   80a28:	681a      	ldr	r2, [r3, #0]
   80a2a:	f022 0208 	bic.w	r2, r2, #8
   80a2e:	601a      	str	r2, [r3, #0]
	USART0->US_CR &=~US_CR_TXDIS;//reset disable
   80a30:	681a      	ldr	r2, [r3, #0]
   80a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   80a36:	601a      	str	r2, [r3, #0]
	USART0->US_CR |=US_CR_TXEN;//enable transmit
   80a38:	681a      	ldr	r2, [r3, #0]
   80a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80a3e:	601a      	str	r2, [r3, #0]
	

}
   80a40:	b002      	add	sp, #8
   80a42:	4770      	bx	lr
   80a44:	40098000 	.word	0x40098000

00080a48 <__libc_init_array>:
   80a48:	b570      	push	{r4, r5, r6, lr}
   80a4a:	4e0f      	ldr	r6, [pc, #60]	; (80a88 <__libc_init_array+0x40>)
   80a4c:	4d0f      	ldr	r5, [pc, #60]	; (80a8c <__libc_init_array+0x44>)
   80a4e:	1b76      	subs	r6, r6, r5
   80a50:	10b6      	asrs	r6, r6, #2
   80a52:	bf18      	it	ne
   80a54:	2400      	movne	r4, #0
   80a56:	d005      	beq.n	80a64 <__libc_init_array+0x1c>
   80a58:	3401      	adds	r4, #1
   80a5a:	f855 3b04 	ldr.w	r3, [r5], #4
   80a5e:	4798      	blx	r3
   80a60:	42a6      	cmp	r6, r4
   80a62:	d1f9      	bne.n	80a58 <__libc_init_array+0x10>
   80a64:	4e0a      	ldr	r6, [pc, #40]	; (80a90 <__libc_init_array+0x48>)
   80a66:	4d0b      	ldr	r5, [pc, #44]	; (80a94 <__libc_init_array+0x4c>)
   80a68:	f000 f8a8 	bl	80bbc <_init>
   80a6c:	1b76      	subs	r6, r6, r5
   80a6e:	10b6      	asrs	r6, r6, #2
   80a70:	bf18      	it	ne
   80a72:	2400      	movne	r4, #0
   80a74:	d006      	beq.n	80a84 <__libc_init_array+0x3c>
   80a76:	3401      	adds	r4, #1
   80a78:	f855 3b04 	ldr.w	r3, [r5], #4
   80a7c:	4798      	blx	r3
   80a7e:	42a6      	cmp	r6, r4
   80a80:	d1f9      	bne.n	80a76 <__libc_init_array+0x2e>
   80a82:	bd70      	pop	{r4, r5, r6, pc}
   80a84:	bd70      	pop	{r4, r5, r6, pc}
   80a86:	bf00      	nop
   80a88:	00080bc8 	.word	0x00080bc8
   80a8c:	00080bc8 	.word	0x00080bc8
   80a90:	00080bd0 	.word	0x00080bd0
   80a94:	00080bc8 	.word	0x00080bc8

00080a98 <register_fini>:
   80a98:	4b02      	ldr	r3, [pc, #8]	; (80aa4 <register_fini+0xc>)
   80a9a:	b113      	cbz	r3, 80aa2 <register_fini+0xa>
   80a9c:	4802      	ldr	r0, [pc, #8]	; (80aa8 <register_fini+0x10>)
   80a9e:	f000 b805 	b.w	80aac <atexit>
   80aa2:	4770      	bx	lr
   80aa4:	00000000 	.word	0x00000000
   80aa8:	00080ab9 	.word	0x00080ab9

00080aac <atexit>:
   80aac:	2300      	movs	r3, #0
   80aae:	4601      	mov	r1, r0
   80ab0:	461a      	mov	r2, r3
   80ab2:	4618      	mov	r0, r3
   80ab4:	f000 b81e 	b.w	80af4 <__register_exitproc>

00080ab8 <__libc_fini_array>:
   80ab8:	b538      	push	{r3, r4, r5, lr}
   80aba:	4c0a      	ldr	r4, [pc, #40]	; (80ae4 <__libc_fini_array+0x2c>)
   80abc:	4d0a      	ldr	r5, [pc, #40]	; (80ae8 <__libc_fini_array+0x30>)
   80abe:	1b64      	subs	r4, r4, r5
   80ac0:	10a4      	asrs	r4, r4, #2
   80ac2:	d00a      	beq.n	80ada <__libc_fini_array+0x22>
   80ac4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80ac8:	3b01      	subs	r3, #1
   80aca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80ace:	3c01      	subs	r4, #1
   80ad0:	f855 3904 	ldr.w	r3, [r5], #-4
   80ad4:	4798      	blx	r3
   80ad6:	2c00      	cmp	r4, #0
   80ad8:	d1f9      	bne.n	80ace <__libc_fini_array+0x16>
   80ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80ade:	f000 b877 	b.w	80bd0 <_fini>
   80ae2:	bf00      	nop
   80ae4:	00080be0 	.word	0x00080be0
   80ae8:	00080bdc 	.word	0x00080bdc

00080aec <__retarget_lock_acquire_recursive>:
   80aec:	4770      	bx	lr
   80aee:	bf00      	nop

00080af0 <__retarget_lock_release_recursive>:
   80af0:	4770      	bx	lr
   80af2:	bf00      	nop

00080af4 <__register_exitproc>:
   80af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80af8:	4d2c      	ldr	r5, [pc, #176]	; (80bac <__register_exitproc+0xb8>)
   80afa:	4606      	mov	r6, r0
   80afc:	6828      	ldr	r0, [r5, #0]
   80afe:	4698      	mov	r8, r3
   80b00:	460f      	mov	r7, r1
   80b02:	4691      	mov	r9, r2
   80b04:	f7ff fff2 	bl	80aec <__retarget_lock_acquire_recursive>
   80b08:	4b29      	ldr	r3, [pc, #164]	; (80bb0 <__register_exitproc+0xbc>)
   80b0a:	681c      	ldr	r4, [r3, #0]
   80b0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80b10:	2b00      	cmp	r3, #0
   80b12:	d03e      	beq.n	80b92 <__register_exitproc+0x9e>
   80b14:	685a      	ldr	r2, [r3, #4]
   80b16:	2a1f      	cmp	r2, #31
   80b18:	dc1c      	bgt.n	80b54 <__register_exitproc+0x60>
   80b1a:	f102 0e01 	add.w	lr, r2, #1
   80b1e:	b176      	cbz	r6, 80b3e <__register_exitproc+0x4a>
   80b20:	2101      	movs	r1, #1
   80b22:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80b26:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80b2a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80b2e:	4091      	lsls	r1, r2
   80b30:	4308      	orrs	r0, r1
   80b32:	2e02      	cmp	r6, #2
   80b34:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b38:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80b3c:	d023      	beq.n	80b86 <__register_exitproc+0x92>
   80b3e:	3202      	adds	r2, #2
   80b40:	f8c3 e004 	str.w	lr, [r3, #4]
   80b44:	6828      	ldr	r0, [r5, #0]
   80b46:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80b4a:	f7ff ffd1 	bl	80af0 <__retarget_lock_release_recursive>
   80b4e:	2000      	movs	r0, #0
   80b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b54:	4b17      	ldr	r3, [pc, #92]	; (80bb4 <__register_exitproc+0xc0>)
   80b56:	b30b      	cbz	r3, 80b9c <__register_exitproc+0xa8>
   80b58:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80b5c:	f3af 8000 	nop.w
   80b60:	4603      	mov	r3, r0
   80b62:	b1d8      	cbz	r0, 80b9c <__register_exitproc+0xa8>
   80b64:	2000      	movs	r0, #0
   80b66:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80b6a:	f04f 0e01 	mov.w	lr, #1
   80b6e:	6058      	str	r0, [r3, #4]
   80b70:	6019      	str	r1, [r3, #0]
   80b72:	4602      	mov	r2, r0
   80b74:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b78:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b7c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80b80:	2e00      	cmp	r6, #0
   80b82:	d0dc      	beq.n	80b3e <__register_exitproc+0x4a>
   80b84:	e7cc      	b.n	80b20 <__register_exitproc+0x2c>
   80b86:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80b8a:	4301      	orrs	r1, r0
   80b8c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80b90:	e7d5      	b.n	80b3e <__register_exitproc+0x4a>
   80b92:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b96:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b9a:	e7bb      	b.n	80b14 <__register_exitproc+0x20>
   80b9c:	6828      	ldr	r0, [r5, #0]
   80b9e:	f7ff ffa7 	bl	80af0 <__retarget_lock_release_recursive>
   80ba2:	f04f 30ff 	mov.w	r0, #4294967295
   80ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80baa:	bf00      	nop
   80bac:	20000430 	.word	0x20000430
   80bb0:	00080bb8 	.word	0x00080bb8
   80bb4:	00000000 	.word	0x00000000

00080bb8 <_global_impure_ptr>:
   80bb8:	20000008                                ... 

00080bbc <_init>:
   80bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bbe:	bf00      	nop
   80bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80bc2:	bc08      	pop	{r3}
   80bc4:	469e      	mov	lr, r3
   80bc6:	4770      	bx	lr

00080bc8 <__init_array_start>:
   80bc8:	00080a99 	.word	0x00080a99

00080bcc <__frame_dummy_init_array_entry>:
   80bcc:	00080119                                ....

00080bd0 <_fini>:
   80bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bd2:	bf00      	nop
   80bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80bd6:	bc08      	pop	{r3}
   80bd8:	469e      	mov	lr, r3
   80bda:	4770      	bx	lr

00080bdc <__fini_array_start>:
   80bdc:	000800f5 	.word	0x000800f5
